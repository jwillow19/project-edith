{"ast":null,"code":"import { createSelector } from 'reselect';\n\nconst selectShop = state => state.shop; // Select the list of collection objects from shop state\n\n\nexport const selectShopCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching); // [NOTE]\n// 1. get keys from collections object - ['hats', 'jackets', 'sneakers', ...]\n// 2. map each key to return a collection object\n// 3. returns a list of collection objects for CollectionOverview to pass to CollectionPreview\n\nexport const selectCollectionsForPreview = createSelector([selectShopCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : []); // @selector    Select the collection which has matching key value as the url-param\n\nexport const selectCollection = collectionUrlParam => createSelector([selectShopCollections], collections => collections ? collections[collectionUrlParam] : null); // @selector    select brand collection in eyeglasses and sunglasses collection\n// 1. grab collections from state\n// 2. use Object.entries(Obj) to get list of object entries; dtype LIST[LISTS]\n// 3. filter item with matching brand field and push to placeholder variable and return\n\nexport const selectBrandCollection = collectionUrlParam => createSelector([selectShopCollections], collections => {\n  // const keys = Object.keys(collections)\n  let brandList = [];\n  const entries = Object.entries(collections);\n\n  for (const [collectionKey, collectionObj] of entries) {\n    const filterList = collectionObj.items.filter(item => item.brand.toLowerCase() === collectionUrlParam.toLowerCase());\n    brandList.push(...filterList);\n  }\n\n  return brandList;\n}); // @selector    selects product from a brand list\n// @for         BrandProductItem\n\nexport const selectProductInBrand = (productUrlParam, collectionUrlParam) => createSelector([selectBrandCollection(collectionUrlParam)], brandList => {\n  return brandList.find(product => productUrlParam.includes(product.model));\n}); // @selector    selects products in collection based on gender: male, female, both\n\nexport const selectCollectionGender = (collectionUrlParam, genderUrlParam) => createSelector([selectCollection(collectionUrlParam)], collection => collection.items.filter(item => item.gender === genderUrlParam || item.gender === 'both')); // @selector    selects siblings of product\n\nexport const selectProductSibling = (productUrlParam, collectionUrlParam) => createSelector([selectCollection(collectionUrlParam)], collection => collection.items.find(item => productUrlParam.includes(item.model))); // COMPOSED SELECTOR - Select a product in a collection with matching key value as url-param\n\nexport const selectProduct = (productUrlParam, collectionUrlParam) => createSelector([selectCollection(collectionUrlParam)], collection => {\n  var finalProduct = null;\n  collection.items.forEach((item, ind) => {\n    item.color.forEach(frameObj => {\n      const product = frameObj.lens.find(lenses => lenses.linkUrl.split('/')[1] === productUrlParam);\n\n      if (product) {\n        finalProduct = product;\n      }\n    }); // return item.color.lens[productIndex]\n  }); // console.log(finalProduct);\n\n  return finalProduct;\n}); // @selector    selects the model of the product\n\nexport const selectProductModel = (productUrlParam, collectionUrlParam) => createSelector([selectCollection(collectionUrlParam)], collection => {\n  const productModel = collection.items.find((item, ind) => productUrlParam.includes(item.model)); // console.log(finalProduct);\n\n  return productModel;\n}); // returns boolean indicating if collection is null\n\nexport const selectIsCollectionLoaded = createSelector([selectShop], // !! to convert falsy value to boolean - !!null == false\nshop => !!shop.collections);","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/selectors/shop.selector.js"],"names":["createSelector","selectShop","state","shop","selectShopCollections","collections","selectIsCollectionFetching","isFetching","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectBrandCollection","brandList","entries","collectionKey","collectionObj","filterList","items","filter","item","brand","toLowerCase","push","selectProductInBrand","productUrlParam","find","product","includes","model","selectCollectionGender","genderUrlParam","collection","gender","selectProductSibling","selectProduct","finalProduct","forEach","ind","color","frameObj","lens","lenses","linkUrl","split","selectProductModel","productModel","selectIsCollectionLoaded"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectShop = (state) => state.shop;\n\n// Select the list of collection objects from shop state\nexport const selectShopCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  (shop) => shop.isFetching\n);\n\n// [NOTE]\n// 1. get keys from collections object - ['hats', 'jackets', 'sneakers', ...]\n// 2. map each key to return a collection object\n// 3. returns a list of collection objects for CollectionOverview to pass to CollectionPreview\nexport const selectCollectionsForPreview = createSelector(\n  [selectShopCollections],\n  (collections) =>\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\n);\n\n// @selector    Select the collection which has matching key value as the url-param\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectShopCollections], (collections) =>\n    collections ? collections[collectionUrlParam] : null\n  );\n\n// @selector    select brand collection in eyeglasses and sunglasses collection\n// 1. grab collections from state\n// 2. use Object.entries(Obj) to get list of object entries; dtype LIST[LISTS]\n// 3. filter item with matching brand field and push to placeholder variable and return\nexport const selectBrandCollection = (collectionUrlParam) =>\n  createSelector([selectShopCollections], (collections) => {\n    // const keys = Object.keys(collections)\n    let brandList = [];\n    const entries = Object.entries(collections);\n    for (const [collectionKey, collectionObj] of entries) {\n      const filterList = collectionObj.items.filter(\n        (item) => item.brand.toLowerCase() === collectionUrlParam.toLowerCase()\n      );\n      brandList.push(...filterList);\n    }\n    return brandList;\n  });\n\n// @selector    selects product from a brand list\n// @for         BrandProductItem\nexport const selectProductInBrand = (productUrlParam, collectionUrlParam) =>\n  createSelector(\n    [selectBrandCollection(collectionUrlParam)],\n\n    (brandList) => {\n      return brandList.find((product) =>\n        productUrlParam.includes(product.model)\n      );\n    }\n  );\n\n// @selector    selects products in collection based on gender: male, female, both\nexport const selectCollectionGender = (collectionUrlParam, genderUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) =>\n    collection.items.filter(\n      (item) => item.gender === genderUrlParam || item.gender === 'both'\n    )\n  );\n// @selector    selects siblings of product\nexport const selectProductSibling = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) =>\n    collection.items.find((item) => productUrlParam.includes(item.model))\n  );\n\n// COMPOSED SELECTOR - Select a product in a collection with matching key value as url-param\nexport const selectProduct = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) => {\n    var finalProduct = null;\n    collection.items.forEach((item, ind) => {\n      item.color.forEach((frameObj) => {\n        const product = frameObj.lens.find(\n          (lenses) => lenses.linkUrl.split('/')[1] === productUrlParam\n        );\n\n        if (product) {\n          finalProduct = product;\n        }\n      });\n\n      // return item.color.lens[productIndex]\n    });\n    // console.log(finalProduct);\n    return finalProduct;\n  });\n\n// @selector    selects the model of the product\nexport const selectProductModel = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) => {\n    const productModel = collection.items.find((item, ind) =>\n      productUrlParam.includes(item.model)\n    );\n    // console.log(finalProduct);\n    return productModel;\n  });\n\n// returns boolean indicating if collection is null\nexport const selectIsCollectionLoaded = createSelector(\n  [selectShop],\n  // !! to convert falsy value to boolean - !!null == false\n  (shop) => !!shop.collections\n);\n"]},"metadata":{},"sourceType":"module"}