{"ast":null,"code":"import { GOOGLE_SIGNIN_START, EMAIL_SIGNIN_START, CHECK_USER_SESSION } from '../actions/types';\nimport { googleProvider, auth, createUserProfile, getCurrentUser } from '../../firebase/db';\nimport { signInSuccess, signInFailure, checkUserSession } from '../actions/user';\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nexport function* getUserSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth); //get userRef - similar to async/await with yield\n\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // @saga    sign in with Google, if account DNE, create profile\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); //get userAuth object from popup\n\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // @saga    sign in with email and password, if account DNE, create profile\n\nexport function* signInWithEmailAndPassword({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password); //get userAuth object from popup\n\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //@saga     Persist user profile - checks if user is signed in or not - if they are, get snapshot of their profile\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // if userAuth == null(not signed in) - do nothing\n    // user is signed in - get user snapshot\n\n    const userRef = yield call(createUserProfile, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // ======================================================\n// Listeners\n// @saga    listens for latest action that triggers action_type: GOOGLE_SIGNIN_START; calls generator function to handle google signin\n\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n} // @saga    listens for latest action that triggers action_type: EMAIL_SIGNIN_START; calls generator function to handle email & pw signin\n\nexport function* emailSignInStart() {\n  yield takeLatest(EMAIL_SIGNIN_START, signInWithEmailAndPassword);\n} // @saga    listens for check_user_session action_type\n\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n} // @saga    takes in all user-sagas and pass to root-saga\n\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/saga/user.saga.js"],"names":["GOOGLE_SIGNIN_START","EMAIL_SIGNIN_START","CHECK_USER_SESSION","googleProvider","auth","createUserProfile","getCurrentUser","signInSuccess","signInFailure","checkUserSession","takeLatest","put","all","call","getUserSnapshot","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmailAndPassword","payload","email","password","isUserAuthenticated","googleSignInStart","emailSignInStart","onCheckUserSession","userSagas"],"mappings":"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","sourcesContent":["import {\n  GOOGLE_SIGNIN_START,\n  EMAIL_SIGNIN_START,\n  CHECK_USER_SESSION,\n} from '../actions/types';\nimport {\n  googleProvider,\n  auth,\n  createUserProfile,\n  getCurrentUser,\n} from '../../firebase/db';\nimport {\n  signInSuccess,\n  signInFailure,\n  checkUserSession,\n} from '../actions/user';\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\n\nexport function* getUserSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth); //get userRef - similar to async/await with yield\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    sign in with Google, if account DNE, create profile\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider); //get userAuth object from popup\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    sign in with email and password, if account DNE, create profile\nexport function* signInWithEmailAndPassword({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password); //get userAuth object from popup\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n//@saga     Persist user profile - checks if user is signed in or not - if they are, get snapshot of their profile\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // if userAuth == null(not signed in) - do nothing\n    // user is signed in - get user snapshot\n    const userRef = yield call(createUserProfile, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// ======================================================\n// Listeners\n\n// @saga    listens for latest action that triggers action_type: GOOGLE_SIGNIN_START; calls generator function to handle google signin\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n}\n// @saga    listens for latest action that triggers action_type: EMAIL_SIGNIN_START; calls generator function to handle email & pw signin\nexport function* emailSignInStart() {\n  yield takeLatest(EMAIL_SIGNIN_START, signInWithEmailAndPassword);\n}\n\n// @saga    listens for check_user_session action_type\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n// @saga    takes in all user-sagas and pass to root-saga\nexport function* userSagas() {\n  yield all([\n    call(googleSignInStart),\n    call(emailSignInStart),\n    call(isUserAuthenticated),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}