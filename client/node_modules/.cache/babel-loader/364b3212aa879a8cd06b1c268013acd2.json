{"ast":null,"code":"import _regeneratorRuntime from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(shopSagas);import{takeLatest,all,call,put}from'redux-saga/effects';import{FETCH_COLLECTIONS_START}from'../actions/types';import{fetchCollectionsSuccess,fetchCollectionsFailure}from'../actions/shop';import{firestore,convertCollectionsSnapshotToMap}from'../../firebase/db';export function fetchCollectionsAsync(){var collectionRef,snapshot,collectionsMap;return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;collectionRef=firestore.collection('collections');_context.next=4;return collectionRef.get();case 4:snapshot=_context.sent;_context.next=7;return call(convertCollectionsSnapshotToMap,snapshot);case 7:collectionsMap=_context.sent;_context.next=10;return put(fetchCollectionsSuccess(collectionsMap));case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put(fetchCollectionsFailure(_context.t0.message));case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}// @saga  listens for every instance of action-type: FETCH_COLLECTIONS_START and invoke async fetch generator\nexport function fetchCollectionsStart(){return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(FETCH_COLLECTIONS_START,fetchCollectionsAsync);case 2:case\"end\":return _context2.stop();}}},_marked2);}export function shopSagas(){return _regeneratorRuntime.wrap(function shopSagas$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([call(fetchCollectionsStart)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/saga/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","shopSagas","takeLatest","all","call","put","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionsSnapshotToMap","collectionRef","collection","get","snapshot","collectionsMap","message"],"mappings":"oNAQiBA,qB,iDA2BAC,qB,iDAIAC,S,EAvCjB,OAASC,UAAT,CAAqBC,GAArB,CAA0BC,IAA1B,CAAgCC,GAAhC,KAA2C,oBAA3C,CACA,OAASC,uBAAT,KAAwC,kBAAxC,CACA,OACEC,uBADF,CAEEC,uBAFF,KAGO,iBAHP,CAIA,OAASC,SAAT,CAAoBC,+BAApB,KAA2D,mBAA3D,CAEA,MAAO,SAAUX,CAAAA,qBAAV,2LAEGY,aAFH,CAEmBF,SAAS,CAACG,UAAV,CAAqB,aAArB,CAFnB,iBAGc,MAAMD,CAAAA,aAAa,CAACE,GAAd,EAAN,CAHd,OAGGC,QAHH,+BAKoB,MAAMV,CAAAA,IAAI,CAC/BM,+BAD+B,CAE/BI,QAF+B,CAAV,CALpB,OAKGC,cALH,gCAUH,MAAMV,CAAAA,GAAG,CAACE,uBAAuB,CAACQ,cAAD,CAAxB,CAAT,CAVG,0GAYH,MAAMV,CAAAA,GAAG,CAACG,uBAAuB,CAAC,YAAMQ,OAAP,CAAxB,CAAT,CAZG,qEA0BP;AACA,MAAO,SAAUhB,CAAAA,qBAAV,qJACL,MAAME,CAAAA,UAAU,CAACI,uBAAD,CAA0BP,qBAA1B,CAAhB,CADK,wDAIP,MAAO,SAAUE,CAAAA,SAAV,yIACL,MAAME,CAAAA,GAAG,CAAC,CAACC,IAAI,CAACJ,qBAAD,CAAL,CAAD,CAAT,CADK","sourcesContent":["import { takeLatest, all, call, put } from 'redux-saga/effects';\nimport { FETCH_COLLECTIONS_START } from '../actions/types';\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from '../actions/shop';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db';\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    // @saga-method:  call(functon, params for function) - calls the function with given parameter\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    // @saga-method:  put(ACTION) basically dispatch\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n\n  //  Promise styled fetch:\n  // try {\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   });\n  // } catch (err) {\n  //   dispatch(fetchCollectionsFailure(err.message));\n  // }\n}\n\n// @saga  listens for every instance of action-type: FETCH_COLLECTIONS_START and invoke async fetch generator\nexport function* fetchCollectionsStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}