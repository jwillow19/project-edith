{"ast":null,"code":"import { createSelector } from 'reselect';\n\nconst selectShop = state => state.shop; // Select the list of collection objects from shop state\n\n\nexport const selectShopCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching); // [NOTE]\n// 1. get keys from collections object - ['hats', 'jackets', 'sneakers', ...]\n// 2. map each key to return a collection object\n// 3. returns a list of collection objects for CollectionOverview to pass to CollectionPreview\n\nexport const selectCollectionsForPreview = createSelector([selectShopCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : []); // Select the collection which has matching key value as the url-param\n\nexport const selectCollection = collectionUrlParam => createSelector([selectShopCollections], collections => collections ? collections[collectionUrlParam] : null); //\n// COMPOSED SELECTOR - Select a product in a collection with matching key value as url-param\n\nexport const selectProduct = (productUrlParam, collectionUrlParam) => createSelector([selectCollection(collectionUrlParam)], collection => {\n  collection.items.forEach(item => {\n    item.color.forEach(frameObj => {\n      const product = frameObj.lens.find(lenses => lenses.linkUrl.split('/')[1] === productUrlParam);\n      console.log(product);\n      return product;\n    });\n  }); // collection.items.find((item) => {\n  //   item.color.find((frame) => {\n  //     frame.lenses.find(\n  //       (lens) => lens.linkUrl.split('/')[1] === productUrlParam\n  //     );\n  //   });\n  //   // item.linkUrl.split('/')[1] === productUrlParam;\n  // });\n}); // returns boolean indicating if collection is null\n\nexport const selectIsCollectionLoaded = createSelector([selectShop], // !! to convert falsy value to boolean - !!null == false\nshop => !!shop.collections);","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/selectors/shop.selector.js"],"names":["createSelector","selectShop","state","shop","selectShopCollections","collections","selectIsCollectionFetching","isFetching","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectProduct","productUrlParam","collection","items","forEach","item","color","frameObj","product","lens","find","lenses","linkUrl","split","console","log","selectIsCollectionLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC,C,CAEA;;;AACA,OAAO,MAAMC,qBAAqB,GAAGJ,cAAc,CACjD,CAACC,UAAD,CADiD,EAEhDE,IAAD,IAAUA,IAAI,CAACE,WAFkC,CAA5C;AAKP,OAAO,MAAMC,0BAA0B,GAAGN,cAAc,CACtD,CAACC,UAAD,CADsD,EAErDE,IAAD,IAAUA,IAAI,CAACI,UAFuC,CAAjD,C,CAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,2BAA2B,GAAGR,cAAc,CACvD,CAACI,qBAAD,CADuD,EAEtDC,WAAD,IACEA,WAAW,GAAGI,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBM,GAAzB,CAA8BC,GAAD,IAASP,WAAW,CAACO,GAAD,CAAjD,CAAH,GAA6D,EAHnB,CAAlD,C,CAMP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,kBAAD,IAC9Bd,cAAc,CAAC,CAACI,qBAAD,CAAD,EAA2BC,WAAD,IACtCA,WAAW,GAAGA,WAAW,CAACS,kBAAD,CAAd,GAAqC,IADpC,CADT,C,CAKP;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,eAAD,EAAkBF,kBAAlB,KAC3Bd,cAAc,CAAC,CAACa,gBAAgB,CAACC,kBAAD,CAAjB,CAAD,EAA0CG,UAAD,IAAgB;AACrEA,EAAAA,UAAU,CAACC,KAAX,CAAiBC,OAAjB,CAA0BC,IAAD,IAAU;AACjCA,IAAAA,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAoBG,QAAD,IAAc;AAC/B,YAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAAd,CACbC,MAAD,IAAYA,MAAM,CAACC,OAAP,CAAeC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,MAAiCZ,eAD/B,CAAhB;AAGAa,MAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACA,aAAOA,OAAP;AACD,KAND;AAOD,GARD,EADqE,CAWrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAnBa,CADT,C,CAsBP;;AACA,OAAO,MAAMQ,wBAAwB,GAAG/B,cAAc,CACpD,CAACC,UAAD,CADoD,EAEpD;AACCE,IAAD,IAAU,CAAC,CAACA,IAAI,CAACE,WAHmC,CAA/C","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectShop = (state) => state.shop;\n\n// Select the list of collection objects from shop state\nexport const selectShopCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  (shop) => shop.isFetching\n);\n\n// [NOTE]\n// 1. get keys from collections object - ['hats', 'jackets', 'sneakers', ...]\n// 2. map each key to return a collection object\n// 3. returns a list of collection objects for CollectionOverview to pass to CollectionPreview\nexport const selectCollectionsForPreview = createSelector(\n  [selectShopCollections],\n  (collections) =>\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\n);\n\n// Select the collection which has matching key value as the url-param\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectShopCollections], (collections) =>\n    collections ? collections[collectionUrlParam] : null\n  );\n\n//\n// COMPOSED SELECTOR - Select a product in a collection with matching key value as url-param\nexport const selectProduct = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) => {\n    collection.items.forEach((item) => {\n      item.color.forEach((frameObj) => {\n        const product = frameObj.lens.find(\n          (lenses) => lenses.linkUrl.split('/')[1] === productUrlParam\n        );\n        console.log(product);\n        return product;\n      });\n    });\n\n    // collection.items.find((item) => {\n    //   item.color.find((frame) => {\n    //     frame.lenses.find(\n    //       (lens) => lens.linkUrl.split('/')[1] === productUrlParam\n    //     );\n    //   });\n    //   // item.linkUrl.split('/')[1] === productUrlParam;\n    // });\n  });\n\n// returns boolean indicating if collection is null\nexport const selectIsCollectionLoaded = createSelector(\n  [selectShop],\n  // !! to convert falsy value to boolean - !!null == false\n  (shop) => !!shop.collections\n);\n"]},"metadata":{},"sourceType":"module"}