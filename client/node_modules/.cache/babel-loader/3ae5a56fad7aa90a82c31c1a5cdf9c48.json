{"ast":null,"code":"var _jsxFileName = \"/home/jwillow/Documents/Web Dev/project-edith/src/App.js\";\nimport React from 'react';\nimport Home from './page/home/Home';\nimport Shop from './page/shop/Shop';\nimport Header from './components/header/Header';\nimport Login from './components/auth/Login';\nimport Register from './components/auth/Register';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { auth } from './firebase/db';\nimport { createUserProfile } from './firebase/db';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { connect } from 'react-redux';\nimport { setUser } from './redux/actions/user';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Destructure in props in class component\n\n    this.unsubscribeAuth = null;\n    const {\n      setUser\n    } = this.props;\n  }\n\n  componentDidMount() {\n    // open-subscription between App & Firebase\n    // auth.onAuthStateChanged triggers when user is signed in - returns a function\n    this.unsubscribeAuth = auth.onAuthStateChanged(async userAuth => {\n      try {\n        // on sign-in\n        if (userAuth) {\n          const userRef = await createUserProfile(userAuth); // this line sees if DB has changed by looking at snapshot\n\n          userRef.onSnapshot(snapshot => {\n            this.setState({\n              currentUser: {\n                id: snapshot.id,\n                ...snapshot.data()\n              }\n            }, () => console.log(this.state));\n          });\n        } else {\n          // userAuth = null on Logout, set state to null\n          this.setState({\n            currentUser: null\n          }, () => console.log(this.state));\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    // close subscription from auth to prevent memory leak\n    this.unsubscribeAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/shop\",\n      component: Shop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/register\",\n      component: Register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n} // NOTE: how you would dispatch without redux-thunk\n\n\nconst mapDispatchToProps = dispatch => ({\n  // setUsr prop is now\n  setUser: user => dispatch(setUser(user))\n});\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/App.js"],"names":["React","Home","Shop","Header","Login","Register","BrowserRouter","Router","Route","Switch","auth","createUserProfile","Provider","store","connect","setUser","App","Component","constructor","props","unsubscribeAuth","componentDidMount","onAuthStateChanged","userAuth","userRef","onSnapshot","snapshot","setState","currentUser","id","data","console","log","state","err","error","componentWillUnmount","render","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Home from './page/home/Home';\nimport Shop from './page/shop/Shop';\nimport Header from './components/header/Header';\nimport Login from './components/auth/Login';\nimport Register from './components/auth/Register';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { auth } from './firebase/db';\nimport { createUserProfile } from './firebase/db';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { connect } from 'react-redux';\nimport { setUser } from './redux/actions/user';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Destructure in props in class component\n    const { setUser } = this.props;\n  }\n\n  unsubscribeAuth = null;\n\n  componentDidMount() {\n    // open-subscription between App & Firebase\n    // auth.onAuthStateChanged triggers when user is signed in - returns a function\n    this.unsubscribeAuth = auth.onAuthStateChanged(async (userAuth) => {\n      try {\n        // on sign-in\n        if (userAuth) {\n          const userRef = await createUserProfile(userAuth);\n\n          // this line sees if DB has changed by looking at snapshot\n          userRef.onSnapshot((snapshot) => {\n            this.setState(\n              {\n                currentUser: {\n                  id: snapshot.id,\n                  ...snapshot.data(),\n                },\n              },\n              () => console.log(this.state)\n            );\n          });\n        } else {\n          // userAuth = null on Logout, set state to null\n          this.setState({ currentUser: null }, () => console.log(this.state));\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    // close subscription from auth to prevent memory leak\n    this.unsubscribeAuth();\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Header />\n          <div>\n            <Switch>\n              <Route exact path='/' component={Home} />\n              <Route path='/shop' component={Shop} />\n              <Route path='/login' component={Login} />\n              <Route path='/register' component={Register} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n// NOTE: how you would dispatch without redux-thunk\nconst mapDispatchToProps = (dispatch) => ({\n  // setUsr prop is now\n  setUser: (user) => dispatch(setUser(user)),\n});\nexport default connect(null, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}