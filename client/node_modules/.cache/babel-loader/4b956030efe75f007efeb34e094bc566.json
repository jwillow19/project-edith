{"ast":null,"code":"import _objectWithoutProperties from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _regeneratorRuntime from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// This import loads the firebase namespace along with all its type information.\nimport*as firebase from'firebase/app';// These imports load individual services into the firebase namespace. (individual services get attached to 'firebase')\nimport'firebase/auth';import'firebase/firestore';var firebaseConfig={apiKey:'AIzaSyD6Fy7kVGNScj8L5FLoZXO8385Oghx139s',authDomain:'project-edith-51131.firebaseapp.com',databaseURL:'https://project-edith-51131.firebaseio.com',projectId:'project-edith-51131',storageBucket:'project-edith-51131.appspot.com',messagingSenderId:'766093877049',appId:'1:766093877049:web:c33af656f32effde9512e8',measurementId:'G-SSJD9HZBV8'};// NOTE - Create user profiles to DB - userAuth obj from auth.authStateChanged\nexport var createUserProfile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth,additionData){var userRef,snapshot,displayName,email,createdAt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:// reference to QueryDocument object location\nuserRef=firestore.doc(\"users/\".concat(userAuth.uid));// get QuerySnapshot object of document\nsnapshot=userRef.get();// If snapshot of user DNE - create instance\nif(snapshot.exists){_context.next=15;break;}displayName=userAuth.displayName,email=userAuth.email;createdAt=new Date();_context.prev=7;_context.next=10;return userRef.set(_objectSpread({displayName:displayName,email:email,createdAt:createdAt},additionData));case 10:_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](7);console.error(_context.t0);case 15:return _context.abrupt(\"return\",userRef);case 16:case\"end\":return _context.stop();}}},_callee,null,[[7,12]]);}));return function createUserProfile(_x,_x2){return _ref.apply(this,arguments);};}();firebase.initializeApp(firebaseConfig);// Get snapshot to object\nexport var convertCollectionsSnapshotToMap=function convertCollectionsSnapshotToMap(collections){var transformedCollecion=collections.docs.map(function(doc){var _doc$data=doc.data(),title=_doc$data.title,items=_doc$data.items,otherProps=_objectWithoutProperties(_doc$data,[\"title\",\"items\"]);return _objectSpread({routeName:encodeURI(title.toLowerCase()),id:doc.id,title:title,items:items},otherProps);});return transformedCollecion.reduce(function(accumulator,collection){// console.log(accumulator);\n// setting title as key to each collection obj - where transformedCollection is a list of collection objs\naccumulator[collection.title.toLowerCase()]=collection;return accumulator;},{});};// Create new collection to store items with batch\nexport var addCollectionAndDocuments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionKey,objectsToAdd){var collectionRef,batch;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:collectionRef=firestore.collection(collectionKey);batch=firestore.batch();objectsToAdd.forEach(function(obj){var newDocRef=collectionRef.doc();batch.set(newDocRef,obj);});_context2.next=5;return batch.commit();case 5:return _context2.abrupt(\"return\",_context2.sent);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function addCollectionAndDocuments(_x3,_x4){return _ref2.apply(this,arguments);};}();// Create new document object to collectionKey\nexport var addDocumentToCollection=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(collectionKey,objectToAdd){var collectionRef,newDocRef,batch;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:collectionRef=firestore.collection(collectionKey);newDocRef=collectionRef.doc();batch=firestore.batch();batch.set(newDocRef,objectToAdd);_context3.next=6;return batch.commit();case 6:return _context3.abrupt(\"return\",_context3.sent);case 7:case\"end\":return _context3.stop();}}},_callee3);}));return function addDocumentToCollection(_x5,_x6){return _ref3.apply(this,arguments);};}();// checks if user is authenticated\nexport var getCurrentUser=function getCurrentUser(){return new Promise(function(resolve,reject){var unsubscribe=auth.onAuthStateChanged(function(userAuth){unsubscribe();resolve(userAuth);},reject);});};// For auth and using the db\nexport var auth=firebase.auth();export var firestore=firebase.firestore();// Google Sign-In authentication utility\nexport var googleProvider=new firebase.auth.GoogleAuthProvider();googleProvider.setCustomParameters({prompt:'select_account'});// sign in with popup with the provider set to Google only (can be twitter etc...)\nexport var signInWithGoogle=function signInWithGoogle(){return auth.signInWithPopup(googleProvider);};export default firebase;","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/firebase/db.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfile","userAuth","additionData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","console","error","initializeApp","convertCollectionsSnapshotToMap","collections","transformedCollecion","docs","map","data","title","items","otherProps","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","addDocumentToCollection","objectToAdd","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["// This import loads the firebase namespace along with all its type information.\nimport * as firebase from 'firebase/app';\n\n// These imports load individual services into the firebase namespace. (individual services get attached to 'firebase')\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyD6Fy7kVGNScj8L5FLoZXO8385Oghx139s',\n  authDomain: 'project-edith-51131.firebaseapp.com',\n  databaseURL: 'https://project-edith-51131.firebaseio.com',\n  projectId: 'project-edith-51131',\n  storageBucket: 'project-edith-51131.appspot.com',\n  messagingSenderId: '766093877049',\n  appId: '1:766093877049:web:c33af656f32effde9512e8',\n  measurementId: 'G-SSJD9HZBV8',\n};\n\n// NOTE - Create user profiles to DB - userAuth obj from auth.authStateChanged\nexport const createUserProfile = async (userAuth, additionData) => {\n  // logout returns null - if(logout) do nothing\n  if (!userAuth) return;\n\n  // reference to QueryDocument object location\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  // get QuerySnapshot object of document\n  const snapshot = userRef.get();\n  // If snapshot of user DNE - create instance\n  if (!snapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create Document object\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionData,\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// Get snapshot to object\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollecion = collections.docs.map((doc) => {\n    const { title, items, ...otherProps } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n      ...otherProps,\n    };\n  });\n\n  return transformedCollecion.reduce((accumulator, collection) => {\n    // console.log(accumulator);\n    // setting title as key to each collection obj - where transformedCollection is a list of collection objs\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\n// Create new collection to store items with batch\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\n// Create new document object to collectionKey\nexport const addDocumentToCollection = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const newDocRef = collectionRef.doc();\n  const batch = firestore.batch();\n  batch.set(newDocRef, objectToAdd);\n  return await batch.commit();\n};\n\n// checks if user is authenticated\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n// For auth and using the db\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Google Sign-In authentication utility\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n// sign in with popup with the provider set to Google only (can be twitter etc...)\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}