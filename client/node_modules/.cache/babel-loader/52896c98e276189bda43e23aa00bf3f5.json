{"ast":null,"code":"import _toConsumableArray from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{createSelector}from'reselect';var selectShop=function selectShop(state){return state.shop;};// Select the list of collection objects from shop state\nexport var selectShopCollections=createSelector([selectShop],function(shop){return shop.collections;});export var selectIsCollectionFetching=createSelector([selectShop],function(shop){return shop.isFetching;});// [NOTE]\n// 1. get keys from collections object - ['hats', 'jackets', 'sneakers', ...]\n// 2. map each key to return a collection object\n// 3. returns a list of collection objects for CollectionOverview to pass to CollectionPreview\nexport var selectCollectionsForPreview=createSelector([selectShopCollections],function(collections){return collections?Object.keys(collections).map(function(key){return collections[key];}):[];});// @selector    Select the collection which has matching key value as the url-param\nexport var selectCollection=function selectCollection(collectionUrlParam){return createSelector([selectShopCollections],function(collections){return collections?collections[collectionUrlParam]:null;});};// @selector    select brand collection in eyeglasses and sunglasses collection\n// 1. grab collections from state\n// 2. use Object.entries(Obj) to get list of object entries; dtype LIST[LISTS]\n// 3. filter item with matching brand field and push to placeholder variable and return\nexport var selectBrandCollection=function selectBrandCollection(brandUrlParam){return createSelector([selectShopCollections],function(collections){// const keys = Object.keys(collections)\nvar brandList=[];var entries=Object.entries(collections);for(var _i=0,_entries=entries;_i<_entries.length;_i++){var _entries$_i=_slicedToArray(_entries[_i],2),collectionKey=_entries$_i[0],collectionObj=_entries$_i[1];var filterList=collectionObj.items.filter(function(item){return item.brand.toLowerCase()===brandUrlParam.toLowerCase();});brandList.push.apply(brandList,_toConsumableArray(filterList));}return brandList;});};// @selector    selects product from a brand list\n// @for         BrandProductItem\nexport var selectProductFromBrandList=function selectProductFromBrandList(productUrlParam,brandUrlParam){return createSelector([selectBrandCollection(brandUrlParam)],function(brandList){return brandList.find(function(product){return productUrlParam.includes(product.model);});});};// @selector    selects products in collection based on gender: male, female, both\nexport var selectCollectionGender=function selectCollectionGender(collectionUrlParam,genderUrlParam){return createSelector([selectCollection(collectionUrlParam)],function(collection){return collection.items.filter(function(item){return item.gender===genderUrlParam||item.gender==='both';});});};// @selector    selects siblings of product\nexport var selectProductSibling=function selectProductSibling(productUrlParam,collectionUrlParam){return createSelector([selectCollection(collectionUrlParam)],function(collection){return collection.items.find(function(item){return productUrlParam.includes(item.model);});});};// COMPOSED SELECTOR - Select a product in a collection with matching key value as url-param\nexport var selectProduct=function selectProduct(productUrlParam,collectionUrlParam){return createSelector([selectCollection(collectionUrlParam)],function(collection){var finalProduct=null;collection.items.forEach(function(item,ind){item.color.forEach(function(frameObj){var product=frameObj.lens.find(function(lenses){return lenses.linkUrl.split('/')[1]===productUrlParam;});if(product){finalProduct=product;}});// return item.color.lens[productIndex]\n});// console.log(finalProduct);\nreturn finalProduct;});};// @selector    selects the model of the product\nexport var selectProductModel=function selectProductModel(productUrlParam,collectionUrlParam){return createSelector([selectCollection(collectionUrlParam)],function(collection){var productModel=collection.items.find(function(item,ind){return productUrlParam.includes(item.model);});// console.log(finalProduct);\nreturn productModel;});};// returns boolean indicating if collection is null\nexport var selectIsCollectionLoaded=createSelector([selectShop],// !! to convert falsy value to boolean - !!null == false\nfunction(shop){return!!shop.collections;});","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/selectors/shop.selector.js"],"names":["createSelector","selectShop","state","shop","selectShopCollections","collections","selectIsCollectionFetching","isFetching","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectBrandCollection","brandUrlParam","brandList","entries","collectionKey","collectionObj","filterList","items","filter","item","brand","toLowerCase","push","selectProductFromBrandList","productUrlParam","find","product","includes","model","selectCollectionGender","genderUrlParam","collection","gender","selectProductSibling","selectProduct","finalProduct","forEach","ind","color","frameObj","lens","lenses","linkUrl","split","selectProductModel","productModel","selectIsCollectionLoaded"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectShop = (state) => state.shop;\n\n// Select the list of collection objects from shop state\nexport const selectShopCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  (shop) => shop.isFetching\n);\n\n// [NOTE]\n// 1. get keys from collections object - ['hats', 'jackets', 'sneakers', ...]\n// 2. map each key to return a collection object\n// 3. returns a list of collection objects for CollectionOverview to pass to CollectionPreview\nexport const selectCollectionsForPreview = createSelector(\n  [selectShopCollections],\n  (collections) =>\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\n);\n\n// @selector    Select the collection which has matching key value as the url-param\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectShopCollections], (collections) =>\n    collections ? collections[collectionUrlParam] : null\n  );\n\n// @selector    select brand collection in eyeglasses and sunglasses collection\n// 1. grab collections from state\n// 2. use Object.entries(Obj) to get list of object entries; dtype LIST[LISTS]\n// 3. filter item with matching brand field and push to placeholder variable and return\nexport const selectBrandCollection = (brandUrlParam) =>\n  createSelector([selectShopCollections], (collections) => {\n    // const keys = Object.keys(collections)\n    let brandList = [];\n    const entries = Object.entries(collections);\n    for (const [collectionKey, collectionObj] of entries) {\n      const filterList = collectionObj.items.filter(\n        (item) => item.brand.toLowerCase() === brandUrlParam.toLowerCase()\n      );\n      brandList.push(...filterList);\n    }\n    return brandList;\n  });\n\n// @selector    selects product from a brand list\n// @for         BrandProductItem\nexport const selectProductFromBrandList = (productUrlParam, brandUrlParam) =>\n  createSelector(\n    [selectBrandCollection(brandUrlParam)],\n\n    (brandList) => {\n      return brandList.find((product) =>\n        productUrlParam.includes(product.model)\n      );\n    }\n  );\n\n// @selector    selects products in collection based on gender: male, female, both\nexport const selectCollectionGender = (collectionUrlParam, genderUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) =>\n    collection.items.filter(\n      (item) => item.gender === genderUrlParam || item.gender === 'both'\n    )\n  );\n// @selector    selects siblings of product\nexport const selectProductSibling = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) =>\n    collection.items.find((item) => productUrlParam.includes(item.model))\n  );\n\n// COMPOSED SELECTOR - Select a product in a collection with matching key value as url-param\nexport const selectProduct = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) => {\n    var finalProduct = null;\n    collection.items.forEach((item, ind) => {\n      item.color.forEach((frameObj) => {\n        const product = frameObj.lens.find(\n          (lenses) => lenses.linkUrl.split('/')[1] === productUrlParam\n        );\n\n        if (product) {\n          finalProduct = product;\n        }\n      });\n\n      // return item.color.lens[productIndex]\n    });\n    // console.log(finalProduct);\n    return finalProduct;\n  });\n\n// @selector    selects the model of the product\nexport const selectProductModel = (productUrlParam, collectionUrlParam) =>\n  createSelector([selectCollection(collectionUrlParam)], (collection) => {\n    const productModel = collection.items.find((item, ind) =>\n      productUrlParam.includes(item.model)\n    );\n    // console.log(finalProduct);\n    return productModel;\n  });\n\n// returns boolean indicating if collection is null\nexport const selectIsCollectionLoaded = createSelector(\n  [selectShop],\n  // !! to convert falsy value to boolean - !!null == false\n  (shop) => !!shop.collections\n);\n"]},"metadata":{},"sourceType":"module"}