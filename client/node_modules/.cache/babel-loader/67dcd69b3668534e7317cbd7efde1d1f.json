{"ast":null,"code":"// This import loads the firebase namespace along with all its type information.\nimport * as firebase from 'firebase/app'; // These imports load individual services into the firebase namespace. (individual services get attached to 'firebase')\n\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: 'AIzaSyD6Fy7kVGNScj8L5FLoZXO8385Oghx139s',\n  authDomain: 'project-edith-51131.firebaseapp.com',\n  databaseURL: 'https://project-edith-51131.firebaseio.com',\n  projectId: 'project-edith-51131',\n  storageBucket: 'project-edith-51131.appspot.com',\n  messagingSenderId: '766093877049',\n  appId: '1:766093877049:web:c33af656f32effde9512e8',\n  measurementId: 'G-SSJD9HZBV8'\n}; // NOTE - Create user profiles to DB - userAuth obj from auth.authStateChanged\n\nexport const createUserProfile = async (userAuth, additionData) => {\n  // logout returns null - if(logout) do nothing\n  if (!userAuth) return; // reference to QueryDocument object location\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // get QuerySnapshot object of document\n\n  const snapshot = userRef.get(); // If snapshot of user DNE - create instance\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create Document object\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionData\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(firebaseConfig); // Create new collection to store items with batch\n// export const addCollectionAndDocuments = async (\n//   collectionKey,\n//   objectsToAdd\n// ) => {\n//   const collectionRef = firestore.collection(collectionKey);\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach((obj) => {\n//     const newDocRef = collectionRef.doc();\n//     batch.set(newDocRef, obj);\n//   });\n//   return await batch.commit();\n// };\n// For auth and using the db\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google Sign-In authentication utility\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // sign in with popup with the provider set to Google only (can be twitter etc...)\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/firebase/db.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfile","userAuth","additionData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","error","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B,C,CAEA;;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,qCAFS;AAGrBC,EAAAA,WAAW,EAAE,4CAHQ;AAIrBC,EAAAA,SAAS,EAAE,qBAJU;AAKrBC,EAAAA,aAAa,EAAE,iCALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB,C,CAWA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,OAAOC,QAAP,EAAiBC,YAAjB,KAAkC;AACjE;AACA,MAAI,CAACD,QAAL,EAAe,OAFkD,CAIjE;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CALiE,CAMjE;;AACA,QAAMC,QAAQ,GAAGJ,OAAO,CAACK,GAAR,EAAjB,CAPiE,CAQjE;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KARD,CAQE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF;;AAED,SAAOZ,OAAP;AACD,CA3BM;AA6BPb,QAAQ,CAAC4B,aAAT,CAAuB3B,cAAvB,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAM4B,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMgB,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe9B,QAAf","sourcesContent":["// This import loads the firebase namespace along with all its type information.\nimport * as firebase from 'firebase/app';\n\n// These imports load individual services into the firebase namespace. (individual services get attached to 'firebase')\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyD6Fy7kVGNScj8L5FLoZXO8385Oghx139s',\n  authDomain: 'project-edith-51131.firebaseapp.com',\n  databaseURL: 'https://project-edith-51131.firebaseio.com',\n  projectId: 'project-edith-51131',\n  storageBucket: 'project-edith-51131.appspot.com',\n  messagingSenderId: '766093877049',\n  appId: '1:766093877049:web:c33af656f32effde9512e8',\n  measurementId: 'G-SSJD9HZBV8',\n};\n\n// NOTE - Create user profiles to DB - userAuth obj from auth.authStateChanged\nexport const createUserProfile = async (userAuth, additionData) => {\n  // logout returns null - if(logout) do nothing\n  if (!userAuth) return;\n\n  // reference to QueryDocument object location\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  // get QuerySnapshot object of document\n  const snapshot = userRef.get();\n  // If snapshot of user DNE - create instance\n  if (!snapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create Document object\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionData,\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// Create new collection to store items with batch\n// export const addCollectionAndDocuments = async (\n//   collectionKey,\n//   objectsToAdd\n// ) => {\n//   const collectionRef = firestore.collection(collectionKey);\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach((obj) => {\n//     const newDocRef = collectionRef.doc();\n//     batch.set(newDocRef, obj);\n//   });\n//   return await batch.commit();\n// };\n\n// For auth and using the db\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Google Sign-In authentication utility\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n// sign in with popup with the provider set to Google only (can be twitter etc...)\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}