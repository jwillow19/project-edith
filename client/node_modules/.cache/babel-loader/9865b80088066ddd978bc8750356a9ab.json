{"ast":null,"code":"import _regeneratorRuntime from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/jwillow/Documents/Web Dev/project-edith/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(getUserSnapshot),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(signInWithGoogle),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(signInWithEmailAndPassword),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(isUserAuthenticated),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(signUserOut),_marked6=/*#__PURE__*/_regeneratorRuntime.mark(signUserUp),_marked7=/*#__PURE__*/_regeneratorRuntime.mark(googleSignInStart),_marked8=/*#__PURE__*/_regeneratorRuntime.mark(emailSignInStart),_marked9=/*#__PURE__*/_regeneratorRuntime.mark(onCheckUserSession),_marked10=/*#__PURE__*/_regeneratorRuntime.mark(onSignOutStart),_marked11=/*#__PURE__*/_regeneratorRuntime.mark(onSignUpStart),_marked12=/*#__PURE__*/_regeneratorRuntime.mark(userSagas);import{GOOGLE_SIGNIN_START,EMAIL_SIGNIN_START,SIGNUP_START,CHECK_USER_SESSION,SIGNOUT_START}from'../actions/types';import{googleProvider,auth,createUserProfile,getCurrentUser}from'../../firebase/db';import{signInSuccess,signInFailure,signOutSuccess,signOutFailure}from'../actions/user';import{takeLatest,put,all,call}from'redux-saga/effects';export function getUserSnapshot(userAuth){var userRef,userSnapshot;return _regeneratorRuntime.wrap(function getUserSnapshot$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(createUserProfile,userAuth);case 3:userRef=_context.sent;_context.next=6;return userRef.get();case 6:userSnapshot=_context.sent;_context.next=9;return put(signInSuccess(_objectSpread({id:userSnapshot.id},userSnapshot.data())));case 9:_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);_context.next=15;return put(signInFailure(_context.t0));case 15:case\"end\":return _context.stop();}}},_marked,null,[[0,11]]);}// @saga    sign in with Google, if account DNE, create profile\nexport function signInWithGoogle(){var _yield$auth$signInWit,user;return _regeneratorRuntime.wrap(function signInWithGoogle$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return auth.signInWithPopup(googleProvider);case 3:_yield$auth$signInWit=_context2.sent;user=_yield$auth$signInWit.user;_context2.next=7;return getUserSnapshot(user);case 7:_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);_context2.next=13;return put(signInFailure(_context2.t0));case 13:case\"end\":return _context2.stop();}}},_marked2,null,[[0,9]]);}// @saga    sign in with email and password, if account DNE, create profile\nexport function signInWithEmailAndPassword(_ref){var _ref$payload,email,password,_yield$auth$signInWit2,user;return _regeneratorRuntime.wrap(function signInWithEmailAndPassword$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_ref$payload=_ref.payload,email=_ref$payload.email,password=_ref$payload.password;_context3.prev=1;_context3.next=4;return auth.signInWithEmailAndPassword(email,password);case 4:_yield$auth$signInWit2=_context3.sent;user=_yield$auth$signInWit2.user;_context3.next=8;return getUserSnapshot(user);case 8:_context3.next=14;break;case 10:_context3.prev=10;_context3.t0=_context3[\"catch\"](1);_context3.next=14;return put(signInFailure(_context3.t0));case 14:case\"end\":return _context3.stop();}}},_marked3,null,[[1,10]]);}//@saga     Persist user profile - checks if user is signed in or not - if they are, get snapshot of their profile\nexport function isUserAuthenticated(){var userAuth;return _regeneratorRuntime.wrap(function isUserAuthenticated$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return getCurrentUser();case 3:userAuth=_context4.sent;if(userAuth){_context4.next=6;break;}return _context4.abrupt(\"return\");case 6:_context4.next=8;return getUserSnapshot(userAuth);case 8:_context4.next=14;break;case 10:_context4.prev=10;_context4.t0=_context4[\"catch\"](0);_context4.next=14;return put(signInFailure(_context4.t0));case 14:case\"end\":return _context4.stop();}}},_marked4,null,[[0,10]]);}// @saga    sign user out\nexport function signUserOut(){return _regeneratorRuntime.wrap(function signUserOut$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return auth.signOut();case 3:_context5.next=5;return put(signOutSuccess());case 5:_context5.next=11;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);_context5.next=11;return put(signOutFailure(_context5.t0));case 11:case\"end\":return _context5.stop();}}},_marked5,null,[[0,7]]);}// @saga    signUserUp - sign user up, save user to db and log them in\nexport function signUserUp(_ref2){var _ref2$payload,email,password,name,_yield$auth$createUse,user,userRef,userSnapshot;return _regeneratorRuntime.wrap(function signUserUp$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_ref2$payload=_ref2.payload,email=_ref2$payload.email,password=_ref2$payload.password,name=_ref2$payload.name;_context6.prev=1;_context6.next=4;return auth.createUserWithEmailAndPassword(email,password);case 4:_yield$auth$createUse=_context6.sent;user=_yield$auth$createUse.user;_context6.next=8;return call(createUserProfile,user,{displayName:name});case 8:userRef=_context6.sent;_context6.next=11;return userRef.get();case 11:userSnapshot=_context6.sent;_context6.next=14;return put(signInSuccess(_objectSpread({id:userSnapshot.id},userSnapshot.data())));case 14:_context6.next=20;break;case 16:_context6.prev=16;_context6.t0=_context6[\"catch\"](1);_context6.next=20;return put(signInFailure(_context6.t0));case 20:case\"end\":return _context6.stop();}}},_marked6,null,[[1,16]]);}// ======================================================\n// Listeners\n// @saga    listens for latest action that triggers action_type: GOOGLE_SIGNIN_START; calls generator function to handle google signin\nexport function googleSignInStart(){return _regeneratorRuntime.wrap(function googleSignInStart$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return takeLatest(GOOGLE_SIGNIN_START,signInWithGoogle);case 2:case\"end\":return _context7.stop();}}},_marked7);}// @saga    listens for latest action that triggers action_type: EMAIL_SIGNIN_START; calls generator function to handle email & pw signin\nexport function emailSignInStart(){return _regeneratorRuntime.wrap(function emailSignInStart$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return takeLatest(EMAIL_SIGNIN_START,signInWithEmailAndPassword);case 2:case\"end\":return _context8.stop();}}},_marked8);}// @saga    listens for check_user_session action_type\nexport function onCheckUserSession(){return _regeneratorRuntime.wrap(function onCheckUserSession$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return takeLatest(CHECK_USER_SESSION,isUserAuthenticated);case 2:case\"end\":return _context9.stop();}}},_marked9);}// @saga    listens for SIGNOUT_STARt action_type\nexport function onSignOutStart(){return _regeneratorRuntime.wrap(function onSignOutStart$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_context10.next=2;return takeLatest(SIGNOUT_START,signUserOut);case 2:case\"end\":return _context10.stop();}}},_marked10);}// @saga    listens for SIGNUP_START action_type\nexport function onSignUpStart(){return _regeneratorRuntime.wrap(function onSignUpStart$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:_context11.next=2;return takeLatest(SIGNUP_START,signUserUp);case 2:case\"end\":return _context11.stop();}}},_marked11);}// ======================================================\n// userSagas\n// @saga    takes in all SAGA LISTENERS and pass to root-saga\nexport function userSagas(){return _regeneratorRuntime.wrap(function userSagas$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:_context12.next=2;return all([call(googleSignInStart),call(emailSignInStart),call(isUserAuthenticated),call(onSignOutStart),call(onSignUpStart)]);case 2:case\"end\":return _context12.stop();}}},_marked12);}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/saga/user.saga.js"],"names":["getUserSnapshot","signInWithGoogle","signInWithEmailAndPassword","isUserAuthenticated","signUserOut","signUserUp","googleSignInStart","emailSignInStart","onCheckUserSession","onSignOutStart","onSignUpStart","userSagas","GOOGLE_SIGNIN_START","EMAIL_SIGNIN_START","SIGNUP_START","CHECK_USER_SESSION","SIGNOUT_START","googleProvider","auth","createUserProfile","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","takeLatest","put","all","call","userAuth","userRef","get","userSnapshot","id","data","signInWithPopup","user","payload","email","password","signOut","name","createUserWithEmailAndPassword","displayName"],"mappings":"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","sourcesContent":["import {\n  GOOGLE_SIGNIN_START,\n  EMAIL_SIGNIN_START,\n  SIGNUP_START,\n  CHECK_USER_SESSION,\n  SIGNOUT_START,\n} from '../actions/types';\nimport {\n  googleProvider,\n  auth,\n  createUserProfile,\n  getCurrentUser,\n} from '../../firebase/db';\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n} from '../actions/user';\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\n\nexport function* getUserSnapshot(userAuth) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth); //get userRef - similar to async/await with yield\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    sign in with Google, if account DNE, create profile\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider); //get userAuth object from popup\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    sign in with email and password, if account DNE, create profile\nexport function* signInWithEmailAndPassword({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password); //get userAuth object from popup\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n//@saga     Persist user profile - checks if user is signed in or not - if they are, get snapshot of their profile\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // if userAuth == null(not signed in) - do nothing\n    // user is signed in - get user snapshot\n    yield getUserSnapshot(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    sign user out\nexport function* signUserOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\n// @saga    signUserUp - sign user up, save user to db and log them in\nexport function* signUserUp({ payload: { email, password, name } }) {\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfile, user, { displayName: name }); //get userRef - similar to async/await with yield\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// ======================================================\n// Listeners\n\n// @saga    listens for latest action that triggers action_type: GOOGLE_SIGNIN_START; calls generator function to handle google signin\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n}\n// @saga    listens for latest action that triggers action_type: EMAIL_SIGNIN_START; calls generator function to handle email & pw signin\nexport function* emailSignInStart() {\n  yield takeLatest(EMAIL_SIGNIN_START, signInWithEmailAndPassword);\n}\n\n// @saga    listens for check_user_session action_type\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n// @saga    listens for SIGNOUT_STARt action_type\nexport function* onSignOutStart() {\n  yield takeLatest(SIGNOUT_START, signUserOut);\n}\n\n// @saga    listens for SIGNUP_START action_type\nexport function* onSignUpStart() {\n  yield takeLatest(SIGNUP_START, signUserUp);\n}\n\n// ======================================================\n// userSagas\n\n// @saga    takes in all SAGA LISTENERS and pass to root-saga\nexport function* userSagas() {\n  yield all([\n    call(googleSignInStart),\n    call(emailSignInStart),\n    call(isUserAuthenticated),\n    call(onSignOutStart),\n    call(onSignUpStart),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}