{"ast":null,"code":"import { GOOGLE_SIGNIN_START, GOOGLE_SIGNIN_SUCCESS, GOOGLE_SIGNIN_FAILURE, EMAIL_SIGNIN_START, EMAIL_SIGNIN_SUCCESS, EMAIL_SIGNIN_FAILURE } from '../actions/types';\nimport { googleProvider, auth, createUserProfile } from '../../firebase/db';\nimport { takeLatest, put, all, call } from 'redux-saga/effects'; // @saga    sign in with Google, if account DNE, create profile\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    createUserProfile(user);\n  } catch (error) {}\n}\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n} // @saga    takes in all user-sagas and pass to root-saga\n\nexport function* userSagas() {\n  yield all([call(googleSignInStart)]);\n}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/saga/user.saga.js"],"names":["GOOGLE_SIGNIN_START","GOOGLE_SIGNIN_SUCCESS","GOOGLE_SIGNIN_FAILURE","EMAIL_SIGNIN_START","EMAIL_SIGNIN_SUCCESS","EMAIL_SIGNIN_FAILURE","googleProvider","auth","createUserProfile","takeLatest","put","all","call","signInWithGoogle","user","signInWithPopup","error","googleSignInStart","userSagas"],"mappings":"AAAA,SACEA,mBADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,kBAJF,EAKEC,oBALF,EAMEC,oBANF,QAOO,kBAPP;AAQA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,iBAA/B,QAAwD,mBAAxD;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAEA;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACQ,eAAL,CAAqBT,cAArB,CAAvB;AACAE,IAAAA,iBAAiB,CAACM,IAAD,CAAjB;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc,CAAE;AACnB;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACnC,QAAMR,UAAU,CAACT,mBAAD,EAAsBa,gBAAtB,CAAhB;AACD,C,CACD;;AACA,OAAO,UAAUK,SAAV,GAAsB;AAC3B,QAAMP,GAAG,CAAC,CAACC,IAAI,CAACK,iBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import {\n  GOOGLE_SIGNIN_START,\n  GOOGLE_SIGNIN_SUCCESS,\n  GOOGLE_SIGNIN_FAILURE,\n  EMAIL_SIGNIN_START,\n  EMAIL_SIGNIN_SUCCESS,\n  EMAIL_SIGNIN_FAILURE,\n} from '../actions/types';\nimport { googleProvider, auth, createUserProfile } from '../../firebase/db';\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\n\n// @saga    sign in with Google, if account DNE, create profile\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    createUserProfile(user);\n  } catch (error) {}\n}\n\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n}\n// @saga    takes in all user-sagas and pass to root-saga\nexport function* userSagas() {\n  yield all([call(googleSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}