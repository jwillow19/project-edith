{"ast":null,"code":"import { takeLatest, takeEvery, call, put } from 'redux-saga/effects';\nimport { FETCH_COLLECTIONS_START } from '../actions/types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../actions/shop';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db';\nexport function* fetchCollectionsAsync() {\n  yield console.log('something');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); // @saga-method:  call(functon, params for function) - calls the function with given parameter\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // @saga-method:  put(ACTION) basically dispatch\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //  Promise styled fetch:\n  // try {\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   });\n  // } catch (err) {\n  //   dispatch(fetchCollectionsFailure(err.message));\n  // }\n\n} // @saga  listens for every instance of action-type: FETCH_COLLECTIONS_START and invoke async fetch generator\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/saga/shop.sagas.js"],"names":["takeLatest","takeEvery","call","put","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionsSnapshotToMap","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,iBAHP;AAIA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,mBAA3D;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;;AACA,MAAI;AACF,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFE,CAGF;;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAC/BM,+BAD+B,EAE/BM,QAF+B,CAAjC,CAJE,CAQF;;AACA,UAAMX,GAAG,CAACE,uBAAuB,CAACW,cAAD,CAAxB,CAAT;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,UAAMd,GAAG,CAACG,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD,GAdsC,CAgBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMnB,UAAU,CAACI,uBAAD,EAA0BK,qBAA1B,CAAhB;AACD","sourcesContent":["import { takeLatest, takeEvery, call, put } from 'redux-saga/effects';\nimport { FETCH_COLLECTIONS_START } from '../actions/types';\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from '../actions/shop';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db';\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('something');\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    // @saga-method:  call(functon, params for function) - calls the function with given parameter\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    // @saga-method:  put(ACTION) basically dispatch\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n\n  //  Promise styled fetch:\n  // try {\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   });\n  // } catch (err) {\n  //   dispatch(fetchCollectionsFailure(err.message));\n  // }\n}\n\n// @saga  listens for every instance of action-type: FETCH_COLLECTIONS_START and invoke async fetch generator\nexport function* fetchCollectionsStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}