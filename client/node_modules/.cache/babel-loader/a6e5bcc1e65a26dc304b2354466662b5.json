{"ast":null,"code":"import { GOOGLE_SIGNIN_START, EMAIL_SIGNIN_START } from '../actions/types';\nimport { googleProvider, auth, createUserProfile } from '../../firebase/db';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from '../actions/user';\nimport { takeLatest, put, all, call } from 'redux-saga/effects'; // @saga    sign in with Google, if account DNE, create profile\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); //get userAuth object from popup\n\n    const userRef = yield call(createUserProfile, user); //get userRef - similar to async/await with yield\n\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // @saga    sign in with email and password, if account DNE, create profile\n\nexport function* signInWithEmailAndPassword({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password); //get userAuth object from popup\n\n    const userRef = yield call(createUserProfile, user); //get userRef - similar to async/await with yield\n\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // @saga    listens for latest action that triggers action_type: GOOGLE_SIGNIN_START; calls generator function to handle google signin\n\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n} // @saga    listens for latest action that triggers action_type: EMAIL_SIGNIN_START; calls generator function to handle email & pw signin\n\nexport function* emailSignInStart() {\n  yield takeLatest(EMAIL_SIGNIN_START, signInWithEmailAndPassword);\n} // @saga    takes in all user-sagas and pass to root-saga\n\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart)]);\n}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/saga/user.saga.js"],"names":["GOOGLE_SIGNIN_START","EMAIL_SIGNIN_START","googleProvider","auth","createUserProfile","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","takeLatest","put","all","call","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","signInSuccess","id","data","error","signInFailure","signInWithEmailAndPassword","payload","email","password","googleSignInStart","emailSignInStart","userSagas"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,QAAwD,kBAAxD;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,iBAA/B,QAAwD,mBAAxD;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,kBAJF,QAKO,iBALP;AAMA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAEA;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMX,IAAI,CAACY,eAAL,CAAqBb,cAArB,CAAvB,CADE,CAC2D;;AAC7D,UAAMc,OAAO,GAAG,MAAMJ,IAAI,CAACR,iBAAD,EAAoBU,IAApB,CAA1B,CAFE,CAEmD;;AACrD,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHE,CAGwC;;AAC1C,UAAMR,GAAG,CAACS,aAAa,CAAC;AAAEC,MAAAA,EAAE,EAAEH,YAAY,CAACG,EAAnB;AAAuB,SAAGH,YAAY,CAACI,IAAb;AAA1B,KAAD,CAAd,CAAT,CAJE,CAIyE;AAC5E,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACa,aAAa,CAACD,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUE,0BAAV,CAAqC;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAArC,EAAuE;AAC5E,MAAI;AACF,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMX,IAAI,CAACqB,0BAAL,CAAgCE,KAAhC,EAAuCC,QAAvC,CAAvB,CADE,CACuE;;AACzE,UAAMX,OAAO,GAAG,MAAMJ,IAAI,CAACR,iBAAD,EAAoBU,IAApB,CAA1B,CAFE,CAEmD;;AACrD,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHE,CAGwC;;AAC1C,UAAMR,GAAG,CAACS,aAAa,CAAC;AAAEC,MAAAA,EAAE,EAAEH,YAAY,CAACG,EAAnB;AAAuB,SAAGH,YAAY,CAACI,IAAb;AAA1B,KAAD,CAAd,CAAT,CAJE,CAIyE;AAC5E,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACa,aAAa,CAACD,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUM,iBAAV,GAA8B;AACnC,QAAMnB,UAAU,CAACT,mBAAD,EAAsBa,gBAAtB,CAAhB;AACD,C,CACD;;AACA,OAAO,UAAUgB,gBAAV,GAA6B;AAClC,QAAMpB,UAAU,CAACR,kBAAD,EAAqBuB,0BAArB,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACgB,iBAAD,CAAL,EAA0BhB,IAAI,CAACiB,gBAAD,CAA9B,CAAD,CAAT;AACD","sourcesContent":["import { GOOGLE_SIGNIN_START, EMAIL_SIGNIN_START } from '../actions/types';\nimport { googleProvider, auth, createUserProfile } from '../../firebase/db';\nimport {\n  googleSignInSuccess,\n  googleSignInFailure,\n  emailSignInSuccess,\n  emailSignInFailure,\n} from '../actions/user';\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\n\n// @saga    sign in with Google, if account DNE, create profile\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider); //get userAuth object from popup\n    const userRef = yield call(createUserProfile, user); //get userRef - similar to async/await with yield\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    sign in with email and password, if account DNE, create profile\nexport function* signInWithEmailAndPassword({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password); //get userAuth object from popup\n    const userRef = yield call(createUserProfile, user); //get userRef - similar to async/await with yield\n    const userSnapshot = yield userRef.get(); //get userSnapshot from QueryReference object\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })); // sign in with snapshot.data()\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// @saga    listens for latest action that triggers action_type: GOOGLE_SIGNIN_START; calls generator function to handle google signin\nexport function* googleSignInStart() {\n  yield takeLatest(GOOGLE_SIGNIN_START, signInWithGoogle);\n}\n// @saga    listens for latest action that triggers action_type: EMAIL_SIGNIN_START; calls generator function to handle email & pw signin\nexport function* emailSignInStart() {\n  yield takeLatest(EMAIL_SIGNIN_START, signInWithEmailAndPassword);\n}\n\n// @saga    takes in all user-sagas and pass to root-saga\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}