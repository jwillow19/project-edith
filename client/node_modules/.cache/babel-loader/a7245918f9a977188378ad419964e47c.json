{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERR, LOGOUT, SET_USER, GOOGLE_SIGNIN_START, GOOGLE_SIGNIN_SUCCESS, GOOGLE_SIGNIN_FAILURE, EMAIL_SIGNIN_START, EMAIL_SIGNIN_SUCCESS, EMAIL_SIGNIN_FAILURE } from '../actions/types';\nimport { auth } from '../../firebase/db';\nimport { createUserProfile } from '../../firebase/db'; // @action  takes in a user object from authStateChanged and return action object\n\nexport const setUser = user => ({\n  type: SET_USER,\n  payload: user\n}); // @action  trigger signin start action\n\nexport const googleSignInStart = () => ({\n  type: GOOGLE_SIGNIN_START\n}); // @action(user)  returns user on successful signin\n\nexport const googleSignInSuccess = user => ({\n  type: GOOGLE_SIGNIN_FAILURE,\n  payload: error\n}); // @action(error)  returns error on failed signin\n\nexport const googleSignInFailure = error => ({\n  type: GOOGLE_SIGNIN_SUCCESS,\n  payload: user\n}); // @action(email, password)  trigger signin start action\n\nexport const emailSignInStart = (email, password) => ({\n  type: EMAIL_SIGNIN_START\n}); // @action()  returns user on successful signin\n\nexport const emailSignInSuccess = user => ({\n  type: EMAIL_SIGNIN_SUCCESS,\n  payload: error\n}); // @action  returns error on failed signin\n\nexport const emailSignInFailure = error => ({\n  type: EMAIL_SIGNIN_FAILURE,\n  payload: user\n}); // @action  log user in with email and password\n\nexport const loginWithEmailAndPassword = (email, password) => async dispatch => {\n  try {\n    // firebase.auth method to sign in, search unique email identifier and verify password\n    await auth.signInWithEmailAndPassword(email, password);\n    dispatch({\n      type: LOGIN_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // @action  registers user\n\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n    const {\n      user\n    } = await auth.createUserWithEmailAndPassword(email, password); // calling createUserProfile here to store the display name\n\n    const userRef = await createUserProfile(user, {\n      displayName: name\n    }); // userRef.onSnapshot((snapshot) => {\n    //   dispatch({\n    //     type: REGISTER_SUCCESS,\n    //     // payload is the user object\n    //     payload: { id: snapshot.id, ...snapshot.data() },\n    //   });\n    // });\n\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/actions/user.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERR","LOGOUT","SET_USER","GOOGLE_SIGNIN_START","GOOGLE_SIGNIN_SUCCESS","GOOGLE_SIGNIN_FAILURE","EMAIL_SIGNIN_START","EMAIL_SIGNIN_SUCCESS","EMAIL_SIGNIN_FAILURE","auth","createUserProfile","setUser","user","type","payload","googleSignInStart","googleSignInSuccess","error","googleSignInFailure","emailSignInStart","email","password","emailSignInSuccess","emailSignInFailure","loginWithEmailAndPassword","dispatch","signInWithEmailAndPassword","err","console","register","name","createUserWithEmailAndPassword","userRef","displayName"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,QARF,EASEC,mBATF,EAUEC,qBAVF,EAWEC,qBAXF,EAYEC,kBAZF,EAaEC,oBAbF,EAcEC,oBAdF,QAeO,kBAfP;AAgBA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,iBAAT,QAAkC,mBAAlC,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEX,QAD0B;AAEhCY,EAAAA,OAAO,EAAEF;AAFuB,CAAX,CAAhB,C,CAKP;;AACA,OAAO,MAAMG,iBAAiB,GAAG,OAAO;AACtCF,EAAAA,IAAI,EAAEV;AADgC,CAAP,CAA1B,C,CAIP;;AACA,OAAO,MAAMa,mBAAmB,GAAIJ,IAAD,KAAW;AAC5CC,EAAAA,IAAI,EAAER,qBADsC;AAE5CS,EAAAA,OAAO,EAAEG;AAFmC,CAAX,CAA5B,C,CAKP;;AACA,OAAO,MAAMC,mBAAmB,GAAID,KAAD,KAAY;AAC7CJ,EAAAA,IAAI,EAAET,qBADuC;AAE7CU,EAAAA,OAAO,EAAEF;AAFoC,CAAZ,CAA5B,C,CAKP;;AACA,OAAO,MAAMO,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AACpDR,EAAAA,IAAI,EAAEP;AAD8C,CAAtB,CAAzB,C,CAIP;;AACA,OAAO,MAAMgB,kBAAkB,GAAIV,IAAD,KAAW;AAC3CC,EAAAA,IAAI,EAAEN,oBADqC;AAE3CO,EAAAA,OAAO,EAAEG;AAFkC,CAAX,CAA3B,C,CAKP;;AACA,OAAO,MAAMM,kBAAkB,GAAIN,KAAD,KAAY;AAC5CJ,EAAAA,IAAI,EAAEL,oBADsC;AAE5CM,EAAAA,OAAO,EAAEF;AAFmC,CAAZ,CAA3B,C,CAKP;;AACA,OAAO,MAAMY,yBAAyB,GAAG,CAACJ,KAAD,EAAQC,QAAR,KAAqB,MAC5DI,QAD4D,IAEzD;AACH,MAAI;AACF;AACA,UAAMhB,IAAI,CAACiB,0BAAL,CAAgCN,KAAhC,EAAuCC,QAAvC,CAAN;AACAI,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGD,GAND,CAME,OAAO8B,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACX,KAAR,CAAcU,GAAd;AACAF,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAGD;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAM+B,QAAQ,GAAG,CAACC,IAAD,EAAOV,KAAP,EAAcC,QAAd,KAA2B,MAAOI,QAAP,IAAoB;AACrE,MAAI;AACF;AACA,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMH,IAAI,CAACsB,8BAAL,CAAoCX,KAApC,EAA2CC,QAA3C,CAAvB,CAFE,CAGF;;AACA,UAAMW,OAAO,GAAG,MAAMtB,iBAAiB,CAACE,IAAD,EAAO;AAAEqB,MAAAA,WAAW,EAAEH;AAAf,KAAP,CAAvC,CAJE,CAKF;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAElB;AADC,KAAD,CAAR;AAGD,GAfD,CAeE,OAAOgC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACX,KAAR,CAAcU,GAAd;AACAF,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAGD;AACF,CAtBM","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  USER_LOADED,\n  AUTH_ERR,\n  LOGOUT,\n  SET_USER,\n  GOOGLE_SIGNIN_START,\n  GOOGLE_SIGNIN_SUCCESS,\n  GOOGLE_SIGNIN_FAILURE,\n  EMAIL_SIGNIN_START,\n  EMAIL_SIGNIN_SUCCESS,\n  EMAIL_SIGNIN_FAILURE,\n} from '../actions/types';\nimport { auth } from '../../firebase/db';\nimport { createUserProfile } from '../../firebase/db';\n\n// @action  takes in a user object from authStateChanged and return action object\nexport const setUser = (user) => ({\n  type: SET_USER,\n  payload: user,\n});\n\n// @action  trigger signin start action\nexport const googleSignInStart = () => ({\n  type: GOOGLE_SIGNIN_START,\n});\n\n// @action(user)  returns user on successful signin\nexport const googleSignInSuccess = (user) => ({\n  type: GOOGLE_SIGNIN_FAILURE,\n  payload: error,\n});\n\n// @action(error)  returns error on failed signin\nexport const googleSignInFailure = (error) => ({\n  type: GOOGLE_SIGNIN_SUCCESS,\n  payload: user,\n});\n\n// @action(email, password)  trigger signin start action\nexport const emailSignInStart = (email, password) => ({\n  type: EMAIL_SIGNIN_START,\n});\n\n// @action()  returns user on successful signin\nexport const emailSignInSuccess = (user) => ({\n  type: EMAIL_SIGNIN_SUCCESS,\n  payload: error,\n});\n\n// @action  returns error on failed signin\nexport const emailSignInFailure = (error) => ({\n  type: EMAIL_SIGNIN_FAILURE,\n  payload: user,\n});\n\n// @action  log user in with email and password\nexport const loginWithEmailAndPassword = (email, password) => async (\n  dispatch\n) => {\n  try {\n    // firebase.auth method to sign in, search unique email identifier and verify password\n    await auth.signInWithEmailAndPassword(email, password);\n    dispatch({\n      type: LOGIN_SUCCESS,\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// @action  registers user\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n    const { user } = await auth.createUserWithEmailAndPassword(email, password);\n    // calling createUserProfile here to store the display name\n    const userRef = await createUserProfile(user, { displayName: name });\n    // userRef.onSnapshot((snapshot) => {\n    //   dispatch({\n    //     type: REGISTER_SUCCESS,\n    //     // payload is the user object\n    //     payload: { id: snapshot.id, ...snapshot.data() },\n    //   });\n    // });\n    dispatch({\n      type: REGISTER_SUCCESS,\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}