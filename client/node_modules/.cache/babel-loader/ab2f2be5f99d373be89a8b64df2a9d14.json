{"ast":null,"code":"export const addItemToCart = (cartItems, itemToAdd) => {\n  // check if item is in cart - .find() returns item that validation condition to true\n  const itemExist = cartItems.find(cartItem => cartItem.linkUrl.split('/')[1] === itemToAdd.linkUrl.split('/')[1]); // itemExist = null if itemToAdd not in cartItems\n  // map each unique, individual item and increase quantity if same item - no duplicates\n\n  if (itemExist) {\n    return cartItems.map(cartItem => cartItem.linkUrl.split('/')[1] === itemToAdd.linkUrl.split('/')[1] ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...itemToAdd,\n    quantity: 1\n  }];\n};\nexport const sumQuantity = cartItems => {\n  let sum = cartItems.reduce((accumulator, cartItem) => {\n    return accumulator + cartItem.quantity;\n  }, 0);\n  return sum;\n}; //removes cartItem instance from cartItems array completely\n\nexport const removeItemFromCart = (cartItems, itemToRemove) => {\n  const newCartItem = cartItems.filter(cartItem => cartItem.model_code !== itemToRemove.model_code);\n  return newCartItem;\n}; //@decrease item quantity by one\n\nexport const decreaseItemCountByOne = (cartItems, itemToDecrease) => {\n  const itemToModify = cartItems.find(cartItem => cartItem.model_code === itemToDecrease.model_code); // case: if quantity is 1, remove instance completely from cart\n\n  if (itemToModify.quantity === 1) {\n    return removeItemFromCart(cartItems, itemToModify);\n  } // case: if quantity is >1, map through array, find the matching item, modify the quantity of that item and return the item state\n\n\n  return cartItems.map(cartItem => cartItem.model_code === itemToDecrease.model_code ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : { ...cartItem\n  });\n}; //@incrase item quantity by one\n\nexport const IncreaseItemCountByOne = (cartItems, itemToIncrease) => {\n  // [NOTE] - map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map(cartItem => cartItem.model_code === itemToIncrease.model_code ? { ...cartItem,\n    quantity: cartItem.quantity + 1\n  } : { ...cartItem\n  });\n};","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/utils/cart.utils.js"],"names":["addItemToCart","cartItems","itemToAdd","itemExist","find","cartItem","linkUrl","split","map","quantity","sumQuantity","sum","reduce","accumulator","removeItemFromCart","itemToRemove","newCartItem","filter","model_code","decreaseItemCountByOne","itemToDecrease","itemToModify","IncreaseItemCountByOne","itemToIncrease"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACrD;AACA,QAAMC,SAAS,GAAGF,SAAS,CAACG,IAAV,CACfC,QAAD,IACEA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,MAAmCL,SAAS,CAACI,OAAV,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAFrB,CAAlB,CAFqD,CAMrD;AACA;;AACA,MAAIJ,SAAJ,EAAe;AACb,WAAOF,SAAS,CAACO,GAAV,CAAeH,QAAD,IACnBA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,MAAmCL,SAAS,CAACI,OAAV,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAnC,GACI,EAAE,GAAGF,QAAL;AAAeI,MAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAAT,GAAoB;AAA7C,KADJ,GAEIJ,QAHC,CAAP;AAKD;;AAED,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,SAAL;AAAgBO,IAAAA,QAAQ,EAAE;AAA1B,GAAf,CAAP;AACD,CAjBM;AAmBP,OAAO,MAAMC,WAAW,GAAIT,SAAD,IAAe;AACxC,MAAIU,GAAG,GAAGV,SAAS,CAACW,MAAV,CAAiB,CAACC,WAAD,EAAcR,QAAd,KAA2B;AACpD,WAAOQ,WAAW,GAAGR,QAAQ,CAACI,QAA9B;AACD,GAFS,EAEP,CAFO,CAAV;AAGA,SAAOE,GAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMG,kBAAkB,GAAG,CAACb,SAAD,EAAYc,YAAZ,KAA6B;AAC7D,QAAMC,WAAW,GAAGf,SAAS,CAACgB,MAAV,CACjBZ,QAAD,IAAcA,QAAQ,CAACa,UAAT,KAAwBH,YAAY,CAACG,UADjC,CAApB;AAGA,SAAOF,WAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMG,sBAAsB,GAAG,CAAClB,SAAD,EAAYmB,cAAZ,KAA+B;AACnE,QAAMC,YAAY,GAAGpB,SAAS,CAACG,IAAV,CAClBC,QAAD,IAAcA,QAAQ,CAACa,UAAT,KAAwBE,cAAc,CAACF,UADlC,CAArB,CADmE,CAInE;;AACA,MAAIG,YAAY,CAACZ,QAAb,KAA0B,CAA9B,EAAiC;AAC/B,WAAOK,kBAAkB,CAACb,SAAD,EAAYoB,YAAZ,CAAzB;AACD,GAPkE,CAQnE;;;AACA,SAAOpB,SAAS,CAACO,GAAV,CAAeH,QAAD,IACnBA,QAAQ,CAACa,UAAT,KAAwBE,cAAc,CAACF,UAAvC,GACI,EAAE,GAAGb,QAAL;AAAeI,IAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAAT,GAAoB;AAA7C,GADJ,GAEI,EAAE,GAAGJ;AAAL,GAHC,CAAP;AAKD,CAdM,C,CAgBP;;AACA,OAAO,MAAMiB,sBAAsB,GAAG,CAACrB,SAAD,EAAYsB,cAAZ,KAA+B;AACnE;AACA,SAAOtB,SAAS,CAACO,GAAV,CAAeH,QAAD,IACnBA,QAAQ,CAACa,UAAT,KAAwBK,cAAc,CAACL,UAAvC,GACI,EAAE,GAAGb,QAAL;AAAeI,IAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAAT,GAAoB;AAA7C,GADJ,GAEI,EAAE,GAAGJ;AAAL,GAHC,CAAP;AAKD,CAPM","sourcesContent":["export const addItemToCart = (cartItems, itemToAdd) => {\n  // check if item is in cart - .find() returns item that validation condition to true\n  const itemExist = cartItems.find(\n    (cartItem) =>\n      cartItem.linkUrl.split('/')[1] === itemToAdd.linkUrl.split('/')[1]\n  );\n  // itemExist = null if itemToAdd not in cartItems\n  // map each unique, individual item and increase quantity if same item - no duplicates\n  if (itemExist) {\n    return cartItems.map((cartItem) =>\n      cartItem.linkUrl.split('/')[1] === itemToAdd.linkUrl.split('/')[1]\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...itemToAdd, quantity: 1 }];\n};\n\nexport const sumQuantity = (cartItems) => {\n  let sum = cartItems.reduce((accumulator, cartItem) => {\n    return accumulator + cartItem.quantity;\n  }, 0);\n  return sum;\n};\n\n//removes cartItem instance from cartItems array completely\nexport const removeItemFromCart = (cartItems, itemToRemove) => {\n  const newCartItem = cartItems.filter(\n    (cartItem) => cartItem.model_code !== itemToRemove.model_code\n  );\n  return newCartItem;\n};\n\n//@decrease item quantity by one\nexport const decreaseItemCountByOne = (cartItems, itemToDecrease) => {\n  const itemToModify = cartItems.find(\n    (cartItem) => cartItem.model_code === itemToDecrease.model_code\n  );\n  // case: if quantity is 1, remove instance completely from cart\n  if (itemToModify.quantity === 1) {\n    return removeItemFromCart(cartItems, itemToModify);\n  }\n  // case: if quantity is >1, map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map((cartItem) =>\n    cartItem.model_code === itemToDecrease.model_code\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : { ...cartItem }\n  );\n};\n\n//@incrase item quantity by one\nexport const IncreaseItemCountByOne = (cartItems, itemToIncrease) => {\n  // [NOTE] - map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map((cartItem) =>\n    cartItem.model_code === itemToIncrease.model_code\n      ? { ...cartItem, quantity: cartItem.quantity + 1 }\n      : { ...cartItem }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}