{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { FETCH_COLLECTIONS_START } from '../actions/types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../actions/shop';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db';\nexport function* fetchCollectionsAsync() {\n  yield console.log('something');\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get(); //  Promise styled fetch:\n  // try {\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   });\n  // } catch (err) {\n  //   dispatch(fetchCollectionsFailure(err.message));\n  // }\n} // @saga  listens for every instance of action-type: FETCH_COLLECTIONS_START and invoke async fetch generator\n\nexport function* fetchCollectionsStart() {\n  // for a specified action_type, listen to every instance of that type\n  yield takeEvery(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/saga/shop.sagas.js"],"names":["takeEvery","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionsSnapshotToMap","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","fetchCollectionsStart"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,iBAHP;AAIA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,mBAA3D;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;AACA,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAHuC,CAIvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,C,CACD;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC;AACA,QAAMb,SAAS,CAACC,uBAAD,EAA0BK,qBAA1B,CAAf;AACD","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport { FETCH_COLLECTIONS_START } from '../actions/types';\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from '../actions/shop';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db';\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('something');\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get();\n  //  Promise styled fetch:\n  // try {\n  //   collectionRef.get().then((snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   });\n  // } catch (err) {\n  //   dispatch(fetchCollectionsFailure(err.message));\n  // }\n}\n// @saga  listens for every instance of action-type: FETCH_COLLECTIONS_START and invoke async fetch generator\nexport function* fetchCollectionsStart() {\n  // for a specified action_type, listen to every instance of that type\n  yield takeEvery(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}