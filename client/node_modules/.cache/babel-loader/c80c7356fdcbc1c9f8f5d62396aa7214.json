{"ast":null,"code":"// import cart from '../redux/reducers/cart';\nexport const addItemToCart = (cartItems, itemToAdd) => {\n  // check if item is in cart - .find() returns item that validation condition to true\n  const itemExist = cartItems.find(cartItem => cartItem.id === itemToAdd.id); // itemExist = null if itemToAdd not in cartItems\n  // map each unique, individual item and increase quantity if same item - no duplicates\n\n  if (itemExist) {\n    return cartItems.map(cartItem => cartItem.id === itemToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...itemToAdd,\n    quantity: 1\n  }];\n};\nexport const sumQuantity = cartItems => {\n  let sum = cartItems.reduce((accumulator, cartItem) => {\n    return accumulator + cartItem.quantity;\n  }, 0);\n  return sum;\n}; //removes cartItem instance from cartItems array completely\n\nexport const removeItemFromCart = (cartItems, itemToRemove) => {\n  const newCartItem = cartItems.filter(cartItem => cartItem.id !== itemToRemove.id);\n  return newCartItem;\n}; //@decrease item quantity by one\n\nexport const decreaseItemCountByOne = (cartItems, itemToDecrease) => {\n  const itemToModify = cartItems.find(cartItem => cartItem.id == itemToDecrease.id); // case: if quantity is 1, remove instance completely from cart\n\n  if (itemToModify.quantity == 1) {\n    return removeItemFromCart(cartItems, itemToModify);\n  } // case: if quantity is >1, map through array, find the matching item, modify the quantity of that item and return the item state\n\n\n  return cartItems.map(cartItem => cartItem.id == itemToDecrease.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : { ...cartItem\n  });\n}; //@incrase item quantity by one\n\nexport const IncreaseItemCountByOne = (cartItems, itemToIncrease) => {\n  // [NOTE] - map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map(cartItem => cartItem.id == itemToIncrease.id ? { ...cartItem,\n    quantity: cartItem.quantity + 1\n  } : { ...cartItem\n  });\n};","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/utils/cart.utils.js"],"names":["addItemToCart","cartItems","itemToAdd","itemExist","find","cartItem","id","map","quantity","sumQuantity","sum","reduce","accumulator","removeItemFromCart","itemToRemove","newCartItem","filter","decreaseItemCountByOne","itemToDecrease","itemToModify","IncreaseItemCountByOne","itemToIncrease"],"mappings":"AAAA;AAEA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACrD;AACA,QAAMC,SAAS,GAAGF,SAAS,CAACG,IAAV,CAAgBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBJ,SAAS,CAACI,EAAvD,CAAlB,CAFqD,CAIrD;AACA;;AACA,MAAIH,SAAJ,EAAe;AACb,WAAOF,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBJ,SAAS,CAACI,EAA1B,GACI,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KADJ,GAEIH,QAHC,CAAP;AAKD;;AAED,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,SAAL;AAAgBM,IAAAA,QAAQ,EAAE;AAA1B,GAAf,CAAP;AACD,CAfM;AAiBP,OAAO,MAAMC,WAAW,GAAIR,SAAD,IAAe;AACxC,MAAIS,GAAG,GAAGT,SAAS,CAACU,MAAV,CAAiB,CAACC,WAAD,EAAcP,QAAd,KAA2B;AACpD,WAAOO,WAAW,GAAGP,QAAQ,CAACG,QAA9B;AACD,GAFS,EAEP,CAFO,CAAV;AAGA,SAAOE,GAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMG,kBAAkB,GAAG,CAACZ,SAAD,EAAYa,YAAZ,KAA6B;AAC7D,QAAMC,WAAW,GAAGd,SAAS,CAACe,MAAV,CACjBX,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBQ,YAAY,CAACR,EADzB,CAApB;AAGA,SAAOS,WAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAME,sBAAsB,GAAG,CAAChB,SAAD,EAAYiB,cAAZ,KAA+B;AACnE,QAAMC,YAAY,GAAGlB,SAAS,CAACG,IAAV,CAClBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,IAAeY,cAAc,CAACZ,EADzB,CAArB,CADmE,CAInE;;AACA,MAAIa,YAAY,CAACX,QAAb,IAAyB,CAA7B,EAAgC;AAC9B,WAAOK,kBAAkB,CAACZ,SAAD,EAAYkB,YAAZ,CAAzB;AACD,GAPkE,CAQnE;;;AACA,SAAOlB,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,IAAeY,cAAc,CAACZ,EAA9B,GACI,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADJ,GAEI,EAAE,GAAGH;AAAL,GAHC,CAAP;AAKD,CAdM,C,CAgBP;;AACA,OAAO,MAAMe,sBAAsB,GAAG,CAACnB,SAAD,EAAYoB,cAAZ,KAA+B;AACnE;AACA,SAAOpB,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,IAAee,cAAc,CAACf,EAA9B,GACI,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADJ,GAEI,EAAE,GAAGH;AAAL,GAHC,CAAP;AAKD,CAPM","sourcesContent":["// import cart from '../redux/reducers/cart';\n\nexport const addItemToCart = (cartItems, itemToAdd) => {\n  // check if item is in cart - .find() returns item that validation condition to true\n  const itemExist = cartItems.find((cartItem) => cartItem.id === itemToAdd.id);\n\n  // itemExist = null if itemToAdd not in cartItems\n  // map each unique, individual item and increase quantity if same item - no duplicates\n  if (itemExist) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === itemToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...itemToAdd, quantity: 1 }];\n};\n\nexport const sumQuantity = (cartItems) => {\n  let sum = cartItems.reduce((accumulator, cartItem) => {\n    return accumulator + cartItem.quantity;\n  }, 0);\n  return sum;\n};\n\n//removes cartItem instance from cartItems array completely\nexport const removeItemFromCart = (cartItems, itemToRemove) => {\n  const newCartItem = cartItems.filter(\n    (cartItem) => cartItem.id !== itemToRemove.id\n  );\n  return newCartItem;\n};\n\n//@decrease item quantity by one\nexport const decreaseItemCountByOne = (cartItems, itemToDecrease) => {\n  const itemToModify = cartItems.find(\n    (cartItem) => cartItem.id == itemToDecrease.id\n  );\n  // case: if quantity is 1, remove instance completely from cart\n  if (itemToModify.quantity == 1) {\n    return removeItemFromCart(cartItems, itemToModify);\n  }\n  // case: if quantity is >1, map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map((cartItem) =>\n    cartItem.id == itemToDecrease.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : { ...cartItem }\n  );\n};\n\n//@incrase item quantity by one\nexport const IncreaseItemCountByOne = (cartItems, itemToIncrease) => {\n  // [NOTE] - map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map((cartItem) =>\n    cartItem.id == itemToIncrease.id\n      ? { ...cartItem, quantity: cartItem.quantity + 1 }\n      : { ...cartItem }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}