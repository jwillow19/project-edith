{"ast":null,"code":"export const addItemToCart = (cartItems, itemToAdd) => {\n  // check if item is in cart - .find() returns item that validation condition to true\n  const itemExist = cartItems.find(cartItem => cartItem.model_code === itemToAdd.model_code);\n  console.log(itemExist); // itemExist = null if itemToAdd not in cartItems\n  // map each unique, individual item and increase quantity if same item - no duplicates\n\n  if (itemExist) {\n    return cartItems.map(cartItem => cartItem.id === itemToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...itemToAdd,\n    quantity: 1\n  }];\n};\nexport const sumQuantity = cartItems => {\n  let sum = cartItems.reduce((accumulator, cartItem) => {\n    return accumulator + cartItem.quantity;\n  }, 0);\n  return sum;\n}; //removes cartItem instance from cartItems array completely\n\nexport const removeItemFromCart = (cartItems, itemToRemove) => {\n  const newCartItem = cartItems.filter(cartItem => cartItem.id !== itemToRemove.id);\n  return newCartItem;\n}; //@decrease item quantity by one\n\nexport const decreaseItemCountByOne = (cartItems, itemToDecrease) => {\n  const itemToModify = cartItems.find(cartItem => cartItem.id === itemToDecrease.id); // case: if quantity is 1, remove instance completely from cart\n\n  if (itemToModify.quantity === 1) {\n    return removeItemFromCart(cartItems, itemToModify);\n  } // case: if quantity is >1, map through array, find the matching item, modify the quantity of that item and return the item state\n\n\n  return cartItems.map(cartItem => cartItem.id === itemToDecrease.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : { ...cartItem\n  });\n}; //@incrase item quantity by one\n\nexport const IncreaseItemCountByOne = (cartItems, itemToIncrease) => {\n  // [NOTE] - map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map(cartItem => cartItem.id === itemToIncrease.id ? { ...cartItem,\n    quantity: cartItem.quantity + 1\n  } : { ...cartItem\n  });\n};","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/utils/cart.utils.js"],"names":["addItemToCart","cartItems","itemToAdd","itemExist","find","cartItem","model_code","console","log","map","id","quantity","sumQuantity","sum","reduce","accumulator","removeItemFromCart","itemToRemove","newCartItem","filter","decreaseItemCountByOne","itemToDecrease","itemToModify","IncreaseItemCountByOne","itemToIncrease"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACrD;AACA,QAAMC,SAAS,GAAGF,SAAS,CAACG,IAAV,CACfC,QAAD,IAAcA,QAAQ,CAACC,UAAT,KAAwBJ,SAAS,CAACI,UADhC,CAAlB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ,EALqD,CAMrD;AACA;;AACA,MAAIA,SAAJ,EAAe;AACb,WAAOF,SAAS,CAACQ,GAAV,CAAeJ,QAAD,IACnBA,QAAQ,CAACK,EAAT,KAAgBR,SAAS,CAACQ,EAA1B,GACI,EAAE,GAAGL,QAAL;AAAeM,MAAAA,QAAQ,EAAEN,QAAQ,CAACM,QAAT,GAAoB;AAA7C,KADJ,GAEIN,QAHC,CAAP;AAKD;;AAED,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,SAAL;AAAgBS,IAAAA,QAAQ,EAAE;AAA1B,GAAf,CAAP;AACD,CAjBM;AAmBP,OAAO,MAAMC,WAAW,GAAIX,SAAD,IAAe;AACxC,MAAIY,GAAG,GAAGZ,SAAS,CAACa,MAAV,CAAiB,CAACC,WAAD,EAAcV,QAAd,KAA2B;AACpD,WAAOU,WAAW,GAAGV,QAAQ,CAACM,QAA9B;AACD,GAFS,EAEP,CAFO,CAAV;AAGA,SAAOE,GAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMG,kBAAkB,GAAG,CAACf,SAAD,EAAYgB,YAAZ,KAA6B;AAC7D,QAAMC,WAAW,GAAGjB,SAAS,CAACkB,MAAV,CACjBd,QAAD,IAAcA,QAAQ,CAACK,EAAT,KAAgBO,YAAY,CAACP,EADzB,CAApB;AAGA,SAAOQ,WAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAME,sBAAsB,GAAG,CAACnB,SAAD,EAAYoB,cAAZ,KAA+B;AACnE,QAAMC,YAAY,GAAGrB,SAAS,CAACG,IAAV,CAClBC,QAAD,IAAcA,QAAQ,CAACK,EAAT,KAAgBW,cAAc,CAACX,EAD1B,CAArB,CADmE,CAInE;;AACA,MAAIY,YAAY,CAACX,QAAb,KAA0B,CAA9B,EAAiC;AAC/B,WAAOK,kBAAkB,CAACf,SAAD,EAAYqB,YAAZ,CAAzB;AACD,GAPkE,CAQnE;;;AACA,SAAOrB,SAAS,CAACQ,GAAV,CAAeJ,QAAD,IACnBA,QAAQ,CAACK,EAAT,KAAgBW,cAAc,CAACX,EAA/B,GACI,EAAE,GAAGL,QAAL;AAAeM,IAAAA,QAAQ,EAAEN,QAAQ,CAACM,QAAT,GAAoB;AAA7C,GADJ,GAEI,EAAE,GAAGN;AAAL,GAHC,CAAP;AAKD,CAdM,C,CAgBP;;AACA,OAAO,MAAMkB,sBAAsB,GAAG,CAACtB,SAAD,EAAYuB,cAAZ,KAA+B;AACnE;AACA,SAAOvB,SAAS,CAACQ,GAAV,CAAeJ,QAAD,IACnBA,QAAQ,CAACK,EAAT,KAAgBc,cAAc,CAACd,EAA/B,GACI,EAAE,GAAGL,QAAL;AAAeM,IAAAA,QAAQ,EAAEN,QAAQ,CAACM,QAAT,GAAoB;AAA7C,GADJ,GAEI,EAAE,GAAGN;AAAL,GAHC,CAAP;AAKD,CAPM","sourcesContent":["export const addItemToCart = (cartItems, itemToAdd) => {\n  // check if item is in cart - .find() returns item that validation condition to true\n  const itemExist = cartItems.find(\n    (cartItem) => cartItem.model_code === itemToAdd.model_code\n  );\n  console.log(itemExist);\n  // itemExist = null if itemToAdd not in cartItems\n  // map each unique, individual item and increase quantity if same item - no duplicates\n  if (itemExist) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === itemToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...itemToAdd, quantity: 1 }];\n};\n\nexport const sumQuantity = (cartItems) => {\n  let sum = cartItems.reduce((accumulator, cartItem) => {\n    return accumulator + cartItem.quantity;\n  }, 0);\n  return sum;\n};\n\n//removes cartItem instance from cartItems array completely\nexport const removeItemFromCart = (cartItems, itemToRemove) => {\n  const newCartItem = cartItems.filter(\n    (cartItem) => cartItem.id !== itemToRemove.id\n  );\n  return newCartItem;\n};\n\n//@decrease item quantity by one\nexport const decreaseItemCountByOne = (cartItems, itemToDecrease) => {\n  const itemToModify = cartItems.find(\n    (cartItem) => cartItem.id === itemToDecrease.id\n  );\n  // case: if quantity is 1, remove instance completely from cart\n  if (itemToModify.quantity === 1) {\n    return removeItemFromCart(cartItems, itemToModify);\n  }\n  // case: if quantity is >1, map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map((cartItem) =>\n    cartItem.id === itemToDecrease.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : { ...cartItem }\n  );\n};\n\n//@incrase item quantity by one\nexport const IncreaseItemCountByOne = (cartItems, itemToIncrease) => {\n  // [NOTE] - map through array, find the matching item, modify the quantity of that item and return the item state\n  return cartItems.map((cartItem) =>\n    cartItem.id === itemToIncrease.id\n      ? { ...cartItem, quantity: cartItem.quantity + 1 }\n      : { ...cartItem }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}