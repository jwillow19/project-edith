{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import{composeWithDevTools}from'redux-devtools-extension';import{persistStore}from'redux-persist';// import thunk from 'redux-thunk';\nimport CreateSagaMiddleware from'redux-saga';import logger from'redux-logger';import rootReducer from'./reducers/index';import rootSaga from'./saga/root-saga';var initialState={};// Saga middleware\nvar sagaMiddleware=CreateSagaMiddleware();// create middleware - use logger middleware only in development\nvar middleware=[sagaMiddleware];if(process.ENV==='development'){middleware.push(logger);}// Create store\nexport var store=createStore(rootReducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));// run rootSaga to listen to all sagas\nsagaMiddleware.run(rootSaga);// persist state with redux-persist\nexport var persistor=persistStore(store);","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","persistStore","CreateSagaMiddleware","logger","rootReducer","rootSaga","initialState","sagaMiddleware","middleware","process","ENV","push","store","run","persistor"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,OAASC,YAAT,KAA6B,eAA7B,CACA;AACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,kBAArB,CAEA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAEA;AACA,GAAMC,CAAAA,cAAc,CAAGL,oBAAoB,EAA3C,CAEA;AACA,GAAMM,CAAAA,UAAU,CAAG,CAACD,cAAD,CAAnB,CAEA,GAAIE,OAAO,CAACC,GAAR,GAAgB,aAApB,CAAmC,CACjCF,UAAU,CAACG,IAAX,CAAgBR,MAAhB,EACD,CAED;AACA,MAAO,IAAMS,CAAAA,KAAK,CAAGd,WAAW,CAC9BM,WAD8B,CAE9BE,YAF8B,CAG9BN,mBAAmB,CAACD,eAAe,MAAf,QAAmBS,UAAnB,CAAD,CAHW,CAAzB,CAMP;AACAD,cAAc,CAACM,GAAf,CAAmBR,QAAnB,EAEA;AACA,MAAO,IAAMS,CAAAA,SAAS,CAAGb,YAAY,CAACW,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore } from 'redux-persist';\n// import thunk from 'redux-thunk';\nimport CreateSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers/index';\nimport rootSaga from './saga/root-saga';\n\nconst initialState = {};\n\n// Saga middleware\nconst sagaMiddleware = CreateSagaMiddleware();\n\n// create middleware - use logger middleware only in development\nconst middleware = [sagaMiddleware];\n\nif (process.ENV === 'development') {\n  middleware.push(logger);\n}\n\n// Create store\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n// run rootSaga to listen to all sagas\nsagaMiddleware.run(rootSaga);\n\n// persist state with redux-persist\nexport const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}