{"ast":null,"code":"import{GOOGLE_SIGNIN_START,SIGNIN_SUCCESS,SIGNIN_FAILURE,EMAIL_SIGNIN_START,CHECK_USER_SESSION,SIGNOUT_START,SIGNOUT_SUCCESS,SIGNOUT_FAILURE,SIGNUP_START,SIGNUP_SUCCESS,SIGNUP_FAILURE}from'../actions/types';// // @action  takes in a user object from authStateChanged and return action object\n// export const setUser = (user) => ({\n//   type: SET_USER,\n//   payload: user,\n// });\n// @action  trigger signin start action\nexport var googleSignInStart=function googleSignInStart(){return{type:GOOGLE_SIGNIN_START};};// @action(user)  returns user on successful signin\nexport var signInSuccess=function signInSuccess(user){return{type:SIGNIN_SUCCESS,payload:user};};// @action(error)  returns error on failed signin\nexport var signInFailure=function signInFailure(error){return{type:SIGNIN_FAILURE,payload:error};};// @action(emailAndPasswor object)  trigger signin start action\nexport var emailSignInStart=function emailSignInStart(emailAndPassword){return{type:EMAIL_SIGNIN_START,payload:emailAndPassword};};// @action  checks user session, see if they are signed in or out\nexport var checkUserSession=function checkUserSession(){return{type:CHECK_USER_SESSION};};// @action  sign user out\nexport var signOutStart=function signOutStart(){return{type:SIGNOUT_START};};export var signOutSuccess=function signOutSuccess(){return{type:SIGNOUT_SUCCESS};};export var signOutFailure=function signOutFailure(error){return{type:SIGNOUT_FAILURE,payload:error};};// @action(ARG: email, password, name obj)    user signup\nexport var signUpStart=function signUpStart(emailNameAndPassword){return{type:SIGNUP_START,payload:emailNameAndPassword};};export var signUpSuccess=function signUpSuccess(){return{type:SIGNUP_SUCCESS};};export var signUpFailure=function signUpFailure(error){return{type:SIGNUP_FAILURE,payload:error};};// // @action  registers user\n// export const register = (name, email, password) => async (dispatch) => {\n//   try {\n//     // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n//     const { user } = await auth.createUserWithEmailAndPassword(email, password);\n//     // calling createUserProfile here to store the display name\n//     const userRef = await createUserProfile(user, { displayName: name });\n//     // userRef.onSnapshot((snapshot) => {\n//     //   dispatch({\n//     //     type: REGISTER_SUCCESS,\n//     //     // payload is the user object\n//     //     payload: { id: snapshot.id, ...snapshot.data() },\n//     //   });\n//     // });\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     dispatch({\n//       type: REGISTER_FAIL,\n//     });\n//   }\n// };\n// // @action  log user in with email and password\n// export const loginWithEmailAndPassword = (email, password) => async (\n//   dispatch\n// ) => {\n//   try {\n//     // firebase.auth method to sign in, search unique email identifier and verify password\n//     await auth.signInWithEmailAndPassword(email, password);\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     dispatch({\n//       type: LOGIN_FAIL,\n//     });\n//   }\n// };","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/actions/user.js"],"names":["GOOGLE_SIGNIN_START","SIGNIN_SUCCESS","SIGNIN_FAILURE","EMAIL_SIGNIN_START","CHECK_USER_SESSION","SIGNOUT_START","SIGNOUT_SUCCESS","SIGNOUT_FAILURE","SIGNUP_START","SIGNUP_SUCCESS","SIGNUP_FAILURE","googleSignInStart","type","signInSuccess","user","payload","signInFailure","error","emailSignInStart","emailAndPassword","checkUserSession","signOutStart","signOutSuccess","signOutFailure","signUpStart","emailNameAndPassword","signUpSuccess","signUpFailure"],"mappings":"AAAA,OACEA,mBADF,CAEEC,cAFF,CAGEC,cAHF,CAIEC,kBAJF,CAKEC,kBALF,CAMEC,aANF,CAOEC,eAPF,CAQEC,eARF,CASEC,YATF,CAUEC,cAVF,CAWEC,cAXF,KAYO,kBAZP,CAcA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAAO,CACtCC,IAAI,CAAEZ,mBADgC,CAAP,EAA1B,CAIP;AACA,MAAO,IAAMa,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,IAAD,QAAW,CACtCF,IAAI,CAAEX,cADgC,CAEtCc,OAAO,CAAED,IAF6B,CAAX,EAAtB,CAKP;AACA,MAAO,IAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,QAAY,CACvCL,IAAI,CAAEV,cADiC,CAEvCa,OAAO,CAAEE,KAF8B,CAAZ,EAAtB,CAKP;AACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,gBAAD,QAAuB,CACrDP,IAAI,CAAET,kBAD+C,CAErDY,OAAO,CAAEI,gBAF4C,CAAvB,EAAzB,CAKP;AACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SAAO,CACrCR,IAAI,CAAER,kBAD+B,CAAP,EAAzB,CAIP;AACA,MAAO,IAAMiB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SAAO,CACjCT,IAAI,CAAEP,aAD2B,CAAP,EAArB,CAGP,MAAO,IAAMiB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAAO,CACnCV,IAAI,CAAEN,eAD6B,CAAP,EAAvB,CAGP,MAAO,IAAMiB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACN,KAAD,QAAY,CACxCL,IAAI,CAAEL,eADkC,CAExCQ,OAAO,CAAEE,KAF+B,CAAZ,EAAvB,CAKP;AACA,MAAO,IAAMO,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,oBAAD,QAA2B,CACpDb,IAAI,CAAEJ,YAD8C,CAEpDO,OAAO,CAAEU,oBAF2C,CAA3B,EAApB,CAIP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAO,CAClCd,IAAI,CAAEH,cAD4B,CAAP,EAAtB,CAGP,MAAO,IAAMkB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACV,KAAD,QAAY,CACvCL,IAAI,CAAEF,cADiC,CAEvCK,OAAO,CAAEE,KAF8B,CAAZ,EAAtB,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  GOOGLE_SIGNIN_START,\n  SIGNIN_SUCCESS,\n  SIGNIN_FAILURE,\n  EMAIL_SIGNIN_START,\n  CHECK_USER_SESSION,\n  SIGNOUT_START,\n  SIGNOUT_SUCCESS,\n  SIGNOUT_FAILURE,\n  SIGNUP_START,\n  SIGNUP_SUCCESS,\n  SIGNUP_FAILURE,\n} from '../actions/types';\n\n// // @action  takes in a user object from authStateChanged and return action object\n// export const setUser = (user) => ({\n//   type: SET_USER,\n//   payload: user,\n// });\n\n// @action  trigger signin start action\nexport const googleSignInStart = () => ({\n  type: GOOGLE_SIGNIN_START,\n});\n\n// @action(user)  returns user on successful signin\nexport const signInSuccess = (user) => ({\n  type: SIGNIN_SUCCESS,\n  payload: user,\n});\n\n// @action(error)  returns error on failed signin\nexport const signInFailure = (error) => ({\n  type: SIGNIN_FAILURE,\n  payload: error,\n});\n\n// @action(emailAndPasswor object)  trigger signin start action\nexport const emailSignInStart = (emailAndPassword) => ({\n  type: EMAIL_SIGNIN_START,\n  payload: emailAndPassword,\n});\n\n// @action  checks user session, see if they are signed in or out\nexport const checkUserSession = () => ({\n  type: CHECK_USER_SESSION,\n});\n\n// @action  sign user out\nexport const signOutStart = () => ({\n  type: SIGNOUT_START,\n});\nexport const signOutSuccess = () => ({\n  type: SIGNOUT_SUCCESS,\n});\nexport const signOutFailure = (error) => ({\n  type: SIGNOUT_FAILURE,\n  payload: error,\n});\n\n// @action(ARG: email, password, name obj)    user signup\nexport const signUpStart = (emailNameAndPassword) => ({\n  type: SIGNUP_START,\n  payload: emailNameAndPassword,\n});\nexport const signUpSuccess = () => ({\n  type: SIGNUP_SUCCESS,\n});\nexport const signUpFailure = (error) => ({\n  type: SIGNUP_FAILURE,\n  payload: error,\n});\n\n// // @action  registers user\n// export const register = (name, email, password) => async (dispatch) => {\n//   try {\n//     // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n//     const { user } = await auth.createUserWithEmailAndPassword(email, password);\n//     // calling createUserProfile here to store the display name\n//     const userRef = await createUserProfile(user, { displayName: name });\n//     // userRef.onSnapshot((snapshot) => {\n//     //   dispatch({\n//     //     type: REGISTER_SUCCESS,\n//     //     // payload is the user object\n//     //     payload: { id: snapshot.id, ...snapshot.data() },\n//     //   });\n//     // });\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     dispatch({\n//       type: REGISTER_FAIL,\n//     });\n//   }\n// };\n\n// // @action  log user in with email and password\n// export const loginWithEmailAndPassword = (email, password) => async (\n//   dispatch\n// ) => {\n//   try {\n//     // firebase.auth method to sign in, search unique email identifier and verify password\n//     await auth.signInWithEmailAndPassword(email, password);\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     dispatch({\n//       type: LOGIN_FAIL,\n//     });\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}