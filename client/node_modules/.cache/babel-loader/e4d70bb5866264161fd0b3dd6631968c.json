{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERR, LOGOUT, SET_USER, GOOGLE_SIGNIN_START, SIGNIN_SUCCESS, SIGNIN_FAILURE, EMAIL_SIGNIN_START, CHECK_USER_SESSION, SIGNOUT_START, SIGNOUT_SUCCESS, SIGNOUT_FAILURE, SIGNUP_START, SIGNUP_SUCCESS, SIGNUP_FAILURE } from '../actions/types';\nimport { auth } from '../../firebase/db';\nimport { createUserProfile } from '../../firebase/db'; // // @action  takes in a user object from authStateChanged and return action object\n// export const setUser = (user) => ({\n//   type: SET_USER,\n//   payload: user,\n// });\n// @action  trigger signin start action\n\nexport const googleSignInStart = () => ({\n  type: GOOGLE_SIGNIN_START\n}); // @action(user)  returns user on successful signin\n\nexport const signInSuccess = user => ({\n  type: SIGNIN_SUCCESS,\n  payload: user\n}); // @action(error)  returns error on failed signin\n\nexport const signInFailure = error => ({\n  type: SIGNIN_FAILURE,\n  payload: error\n}); // @action(emailAndPasswor object)  trigger signin start action\n\nexport const emailSignInStart = emailAndPassword => ({\n  type: EMAIL_SIGNIN_START,\n  payload: emailAndPassword\n}); // @action  checks user session, see if they are signed in or out\n\nexport const checkUserSession = () => ({\n  type: CHECK_USER_SESSION\n}); // // @action  log user in with email and password\n// export const loginWithEmailAndPassword = (email, password) => async (\n//   dispatch\n// ) => {\n//   try {\n//     // firebase.auth method to sign in, search unique email identifier and verify password\n//     await auth.signInWithEmailAndPassword(email, password);\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     dispatch({\n//       type: LOGIN_FAIL,\n//     });\n//   }\n// };\n// @action  sign user out\n\nexport const signOutStart = () => ({\n  type: SIGNOUT_START\n});\nexport const signOutSuccess = () => ({\n  type: SIGNOUT_SUCCESS\n});\nexport const signOutFailure = error => ({\n  type: SIGNOUT_FAILURE,\n  payload: error\n}); // @action(ARG: email, password, name obj)    user signup\n\nexport const signUpStart = emailNameAndPassword => ({\n  type: SIGNUP_START,\n  payload: emailNameAndPassword\n}); // export const signUpSuccess = () => ({\n//   type: SIGNUP_SUCCESS\n// })\n// export const signUpFailure = (error) => ({\n//   type: SIGNUP_FAILURE,\n//   payload: error\n// })\n// @action  registers user\n\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n    const {\n      user\n    } = await auth.createUserWithEmailAndPassword(email, password); // calling createUserProfile here to store the display name\n\n    const userRef = await createUserProfile(user, {\n      displayName: name\n    }); // userRef.onSnapshot((snapshot) => {\n    //   dispatch({\n    //     type: REGISTER_SUCCESS,\n    //     // payload is the user object\n    //     payload: { id: snapshot.id, ...snapshot.data() },\n    //   });\n    // });\n\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/actions/user.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERR","LOGOUT","SET_USER","GOOGLE_SIGNIN_START","SIGNIN_SUCCESS","SIGNIN_FAILURE","EMAIL_SIGNIN_START","CHECK_USER_SESSION","SIGNOUT_START","SIGNOUT_SUCCESS","SIGNOUT_FAILURE","SIGNUP_START","SIGNUP_SUCCESS","SIGNUP_FAILURE","auth","createUserProfile","googleSignInStart","type","signInSuccess","user","payload","signInFailure","error","emailSignInStart","emailAndPassword","checkUserSession","signOutStart","signOutSuccess","signOutFailure","signUpStart","emailNameAndPassword","register","name","email","password","dispatch","createUserWithEmailAndPassword","userRef","displayName","err","console"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,QARF,EASEC,mBATF,EAUEC,cAVF,EAWEC,cAXF,EAYEC,kBAZF,EAaEC,kBAbF,EAcEC,aAdF,EAeEC,eAfF,EAgBEC,eAhBF,EAiBEC,YAjBF,EAkBEC,cAlBF,EAmBEC,cAnBF,QAoBO,kBApBP;AAqBA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,iBAAT,QAAkC,mBAAlC,C,CAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AACtCC,EAAAA,IAAI,EAAEd;AADgC,CAAP,CAA1B,C,CAIP;;AACA,OAAO,MAAMe,aAAa,GAAIC,IAAD,KAAW;AACtCF,EAAAA,IAAI,EAAEb,cADgC;AAEtCgB,EAAAA,OAAO,EAAED;AAF6B,CAAX,CAAtB,C,CAKP;;AACA,OAAO,MAAME,aAAa,GAAIC,KAAD,KAAY;AACvCL,EAAAA,IAAI,EAAEZ,cADiC;AAEvCe,EAAAA,OAAO,EAAEE;AAF8B,CAAZ,CAAtB,C,CAKP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,gBAAD,KAAuB;AACrDP,EAAAA,IAAI,EAAEX,kBAD+C;AAErDc,EAAAA,OAAO,EAAEI;AAF4C,CAAvB,CAAzB,C,CAKP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AACrCR,EAAAA,IAAI,EAAEV;AAD+B,CAAP,CAAzB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMmB,YAAY,GAAG,OAAO;AACjCT,EAAAA,IAAI,EAAET;AAD2B,CAAP,CAArB;AAGP,OAAO,MAAMmB,cAAc,GAAG,OAAO;AACnCV,EAAAA,IAAI,EAAER;AAD6B,CAAP,CAAvB;AAGP,OAAO,MAAMmB,cAAc,GAAIN,KAAD,KAAY;AACxCL,EAAAA,IAAI,EAAEP,eADkC;AAExCU,EAAAA,OAAO,EAAEE;AAF+B,CAAZ,CAAvB,C,CAKP;;AACA,OAAO,MAAMO,WAAW,GAAIC,oBAAD,KAA2B;AACpDb,EAAAA,IAAI,EAAEN,YAD8C;AAEpDS,EAAAA,OAAO,EAAEU;AAF2C,CAA3B,CAApB,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACF;AACA,UAAM;AAAEhB,MAAAA;AAAF,QAAW,MAAML,IAAI,CAACsB,8BAAL,CAAoCH,KAApC,EAA2CC,QAA3C,CAAvB,CAFE,CAGF;;AACA,UAAMG,OAAO,GAAG,MAAMtB,iBAAiB,CAACI,IAAD,EAAO;AAAEmB,MAAAA,WAAW,EAAEN;AAAf,KAAP,CAAvC,CAJE,CAKF;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,IAAAA,QAAQ,CAAC;AACPlB,MAAAA,IAAI,EAAEtB;AADC,KAAD,CAAR;AAGD,GAfD,CAeE,OAAO4C,GAAP,EAAY;AACZC,IAAAA,OAAO,CAAClB,KAAR,CAAciB,GAAd;AACAJ,IAAAA,QAAQ,CAAC;AACPlB,MAAAA,IAAI,EAAErB;AADC,KAAD,CAAR;AAGD;AACF,CAtBM","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  USER_LOADED,\n  AUTH_ERR,\n  LOGOUT,\n  SET_USER,\n  GOOGLE_SIGNIN_START,\n  SIGNIN_SUCCESS,\n  SIGNIN_FAILURE,\n  EMAIL_SIGNIN_START,\n  CHECK_USER_SESSION,\n  SIGNOUT_START,\n  SIGNOUT_SUCCESS,\n  SIGNOUT_FAILURE,\n  SIGNUP_START,\n  SIGNUP_SUCCESS,\n  SIGNUP_FAILURE,\n} from '../actions/types';\nimport { auth } from '../../firebase/db';\nimport { createUserProfile } from '../../firebase/db';\n\n// // @action  takes in a user object from authStateChanged and return action object\n// export const setUser = (user) => ({\n//   type: SET_USER,\n//   payload: user,\n// });\n\n// @action  trigger signin start action\nexport const googleSignInStart = () => ({\n  type: GOOGLE_SIGNIN_START,\n});\n\n// @action(user)  returns user on successful signin\nexport const signInSuccess = (user) => ({\n  type: SIGNIN_SUCCESS,\n  payload: user,\n});\n\n// @action(error)  returns error on failed signin\nexport const signInFailure = (error) => ({\n  type: SIGNIN_FAILURE,\n  payload: error,\n});\n\n// @action(emailAndPasswor object)  trigger signin start action\nexport const emailSignInStart = (emailAndPassword) => ({\n  type: EMAIL_SIGNIN_START,\n  payload: emailAndPassword,\n});\n\n// @action  checks user session, see if they are signed in or out\nexport const checkUserSession = () => ({\n  type: CHECK_USER_SESSION,\n});\n\n// // @action  log user in with email and password\n// export const loginWithEmailAndPassword = (email, password) => async (\n//   dispatch\n// ) => {\n//   try {\n//     // firebase.auth method to sign in, search unique email identifier and verify password\n//     await auth.signInWithEmailAndPassword(email, password);\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     dispatch({\n//       type: LOGIN_FAIL,\n//     });\n//   }\n// };\n\n// @action  sign user out\nexport const signOutStart = () => ({\n  type: SIGNOUT_START,\n});\nexport const signOutSuccess = () => ({\n  type: SIGNOUT_SUCCESS,\n});\nexport const signOutFailure = (error) => ({\n  type: SIGNOUT_FAILURE,\n  payload: error,\n});\n\n// @action(ARG: email, password, name obj)    user signup\nexport const signUpStart = (emailNameAndPassword) => ({\n  type: SIGNUP_START,\n  payload: emailNameAndPassword,\n});\n// export const signUpSuccess = () => ({\n//   type: SIGNUP_SUCCESS\n// })\n// export const signUpFailure = (error) => ({\n//   type: SIGNUP_FAILURE,\n//   payload: error\n// })\n\n// @action  registers user\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n    const { user } = await auth.createUserWithEmailAndPassword(email, password);\n    // calling createUserProfile here to store the display name\n    const userRef = await createUserProfile(user, { displayName: name });\n    // userRef.onSnapshot((snapshot) => {\n    //   dispatch({\n    //     type: REGISTER_SUCCESS,\n    //     // payload is the user object\n    //     payload: { id: snapshot.id, ...snapshot.data() },\n    //   });\n    // });\n    dispatch({\n      type: REGISTER_SUCCESS,\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}