{"ast":null,"code":"import { FETCH_COLLECTIONS_START, FETCH_COLLECTIONS_SUCCESS, FETCH_COLLECTIONS_FAILURE } from './types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db'; // export const updateCollections = (collectionsMap) => (dispatch) => {\n//   dispatch({\n//     type: UPDATE_COLLECTIONS,\n//     payload: collectionsMap,\n//   });\n// };\n\nexport const fetchCollectionsStart = () => ({\n  type: FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // @action  fetchCollectionsStartAsync promise-based action moved to saga instead\n// export const fetchCollectionsStartAsync = () => (dispatch) => {\n//   const collectionRef = firestore.collection('collections');\n//   dispatch(fetchCollectionsStart());\n//   //  Promise styled fetch:\n//   try {\n//     collectionRef.get().then((snapshot) => {\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//       dispatch(fetchCollectionsSuccess(collectionsMap));\n//     });\n//   } catch (err) {\n//     dispatch(fetchCollectionsFailure(err.message));\n//   }\n// };","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/client/src/redux/actions/shop.js"],"names":["FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","FETCH_COLLECTIONS_FAILURE","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","fetchCollectionsSuccess","collectionsMap","payload","fetchCollectionsFailure","errorMessage"],"mappings":"AAAA,SACEA,uBADF,EAEEC,yBAFF,EAGEC,yBAHF,QAIO,SAJP;AAKA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,mBAA3D,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEN;AADoC,CAAP,CAA9B;AAIP,OAAO,MAAMO,uBAAuB,GAAIC,cAAD,KAAqB;AAC1DF,EAAAA,IAAI,EAAEL,yBADoD;AAE1DQ,EAAAA,OAAO,EAAED;AAFiD,CAArB,CAAhC;AAIP,OAAO,MAAME,uBAAuB,GAAIC,YAAD,KAAmB;AACxDL,EAAAA,IAAI,EAAEJ,yBADkD;AAExDO,EAAAA,OAAO,EAAEE;AAF+C,CAAnB,CAAhC,C,CAKP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  FETCH_COLLECTIONS_START,\n  FETCH_COLLECTIONS_SUCCESS,\n  FETCH_COLLECTIONS_FAILURE,\n} from './types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/db';\n\n// export const updateCollections = (collectionsMap) => (dispatch) => {\n//   dispatch({\n//     type: UPDATE_COLLECTIONS,\n//     payload: collectionsMap,\n//   });\n// };\n\nexport const fetchCollectionsStart = () => ({\n  type: FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\n  type: FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\nexport const fetchCollectionsFailure = (errorMessage) => ({\n  type: FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\n// @action  fetchCollectionsStartAsync promise-based action moved to saga instead\n\n// export const fetchCollectionsStartAsync = () => (dispatch) => {\n//   const collectionRef = firestore.collection('collections');\n//   dispatch(fetchCollectionsStart());\n//   //  Promise styled fetch:\n//   try {\n//     collectionRef.get().then((snapshot) => {\n//       const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//       dispatch(fetchCollectionsSuccess(collectionsMap));\n//     });\n//   } catch (err) {\n//     dispatch(fetchCollectionsFailure(err.message));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}