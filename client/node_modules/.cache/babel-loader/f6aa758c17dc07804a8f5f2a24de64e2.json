{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERR, LOGOUT, SET_USER } from '../actions/types';\nimport { auth } from '../../firebase/db';\nimport { createUserProfile } from '../../firebase/db'; // @action  takes in a user object from authStateChanged and return action object\n\nexport const setUser = user => ({\n  type: SET_USER,\n  payload: user\n}); // @action  log user in with email and password\n\nexport const loginWithEmailAndPassword = (email, password) => async dispatch => {\n  try {\n    // firebase.auth method to sign in, search unique email identifier and verify password\n    await auth.signInWithEmailAndPassword(email, password);\n    dispatch({\n      type: LOGIN_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // @action  registers user\n\nexport const register = (email, password) => async dispatch => {\n  try {\n    // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n    const {\n      user\n    } = await auth.createUserWithEmailAndPassword(email, password); // calling createUserProfile here to store the display name\n\n    const userRef = await createUserProfile(user, {\n      name\n    });\n    userRef.onSnapshot(snapshot => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: {\n          id: snapshot.id,\n          ...snapshot.data()\n        }\n      });\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/redux/actions/user.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERR","LOGOUT","SET_USER","auth","createUserProfile","setUser","user","type","payload","loginWithEmailAndPassword","email","password","dispatch","signInWithEmailAndPassword","err","console","error","register","createUserWithEmailAndPassword","userRef","name","onSnapshot","snapshot","id","data"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,QARF,QASO,kBATP;AAUA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,iBAAT,QAAkC,mBAAlC,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEL,QAD0B;AAEhCM,EAAAA,OAAO,EAAEF;AAFuB,CAAX,CAAhB,C,CAKP;;AACA,OAAO,MAAMG,yBAAyB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAC5DC,QAD4D,IAEzD;AACH,MAAI;AACF;AACA,UAAMT,IAAI,CAACU,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAN;AACAC,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAGD,GAND,CAME,OAAOiB,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAF,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMmB,QAAQ,GAAG,CAACP,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC/D,MAAI;AACF;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMH,IAAI,CAACe,8BAAL,CAAoCR,KAApC,EAA2CC,QAA3C,CAAvB,CAFE,CAGF;;AACA,UAAMQ,OAAO,GAAG,MAAMf,iBAAiB,CAACE,IAAD,EAAO;AAAEc,MAAAA;AAAF,KAAP,CAAvC;AACAD,IAAAA,OAAO,CAACE,UAAR,CAAoBC,QAAD,IAAc;AAC/BV,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEZ,gBADC;AAEPa,QAAAA,OAAO,EAAE;AAAEe,UAAAA,EAAE,EAAED,QAAQ,CAACC,EAAf;AAAmB,aAAGD,QAAQ,CAACE,IAAT;AAAtB;AAFF,OAAD,CAAR;AAID,KALD;AAMD,GAXD,CAWE,OAAOV,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAF,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CAlBM","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  USER_LOADED,\n  AUTH_ERR,\n  LOGOUT,\n  SET_USER,\n} from '../actions/types';\nimport { auth } from '../../firebase/db';\nimport { createUserProfile } from '../../firebase/db';\n\n// @action  takes in a user object from authStateChanged and return action object\nexport const setUser = (user) => ({\n  type: SET_USER,\n  payload: user,\n});\n\n// @action  log user in with email and password\nexport const loginWithEmailAndPassword = (email, password) => async (\n  dispatch\n) => {\n  try {\n    // firebase.auth method to sign in, search unique email identifier and verify password\n    await auth.signInWithEmailAndPassword(email, password);\n    dispatch({\n      type: LOGIN_SUCCESS,\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// @action  registers user\nexport const register = (email, password) => async (dispatch) => {\n  try {\n    // create user document => trigger authStateChange in App.js => triggers createUserProfile()\n    const { user } = await auth.createUserWithEmailAndPassword(email, password);\n    // calling createUserProfile here to store the display name\n    const userRef = await createUserProfile(user, { name });\n    userRef.onSnapshot((snapshot) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: { id: snapshot.id, ...snapshot.data() },\n      });\n    });\n  } catch (err) {\n    console.error(err);\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}