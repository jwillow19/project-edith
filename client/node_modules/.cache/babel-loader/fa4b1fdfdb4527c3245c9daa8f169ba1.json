{"ast":null,"code":"var _jsxFileName = \"/home/jwillow/Documents/Web Dev/project-edith/src/page/shop/Shop.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport OverviewPage from '../../components/collections/OverviewPage';\nimport CollectionPage from '../collection/CollectionPage';\nimport Collection from '../collection/Collection';\nimport { connect } from 'react-redux';\nimport WithSpinner from '../../components/spinner/WithSpinner';\nimport { fetchCollectionsStartAsync } from '../../redux/actions/shop';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching, selectIsCollectionLoaded } from '../../redux/selectors/shop.selector';\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\nconst OverviewPageWithSpinner = WithSpinner(OverviewPage); // const CollectionPageWithSpinner = WithSpinner(Collection);\n\nclass Shop extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // LiveUpdate fetch data method - get snapshot of collection when first run or upon chagnes\n    // collectionRef.onSnapshot(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   // console.log(collectionsMap);\n    //   // action to update collections from store\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // <Route exact path={`${match.path}`} component={OverviewPage} />\n    // });\n  }\n\n  render() {\n    const {\n      match,\n      loading,\n      collectionLoaded\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(OverviewPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !collectionLoaded\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  loading: selectIsCollectionFetching,\n  collectionLoaded: selectIsCollectionLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop);","map":{"version":3,"sources":["/home/jwillow/Documents/Web Dev/project-edith/src/page/shop/Shop.jsx"],"names":["React","Route","OverviewPage","CollectionPage","Collection","connect","WithSpinner","fetchCollectionsStartAsync","createStructuredSelector","selectIsCollectionFetching","selectIsCollectionLoaded","CollectionPageWithSpinner","OverviewPageWithSpinner","Shop","Component","componentDidMount","props","render","match","loading","collectionLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,SAASC,0BAAT,QAA2C,0BAA3C;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SACEC,0BADF,EAEEC,wBAFF,QAGO,qCAHP;AAKA,MAAMC,yBAAyB,GAAGL,WAAW,CAACH,cAAD,CAA7C;AACA,MAAMS,uBAAuB,GAAGN,WAAW,CAACJ,YAAD,CAA3C,C,CACA;;AACA,MAAMW,IAAN,SAAmBb,KAAK,CAACc,SAAzB,CAAmC;AACjCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAER,MAAAA;AAAF,QAAiC,KAAKS,KAA5C;AACAT,IAAAA,0BAA0B,GAFR,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAAuC,KAAKJ,KAAlD;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EADtB;AAEE,MAAA,MAAM,EAAGL,KAAD,iBACN,oBAAC,uBAAD;AAAyB,QAAA,SAAS,EAAEG;AAApC,SAAiDH,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAOE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBADtB;AAEE,MAAA,MAAM,EAAGL,KAAD,iBACN,oBAAC,yBAAD;AACE,QAAA,SAAS,EAAE,CAACI;AADd,SAEMJ,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAmBD;;AArCgC;;AAwCnC,MAAMM,eAAe,GAAGd,wBAAwB,CAAC;AAC/CW,EAAAA,OAAO,EAAEV,0BADsC;AAE/CW,EAAAA,gBAAgB,EAAEV;AAF6B,CAAD,CAAhD;;AAKA,MAAMa,kBAAkB,GAAIC,QAAD,KAAe;AACxCjB,EAAAA,0BAA0B,EAAE,MAAMiB,QAAQ,CAACjB,0BAA0B,EAA3B;AADF,CAAf,CAA3B;;AAIA,eAAeF,OAAO,CAACiB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport OverviewPage from '../../components/collections/OverviewPage';\nimport CollectionPage from '../collection/CollectionPage';\nimport Collection from '../collection/Collection';\nimport { connect } from 'react-redux';\nimport WithSpinner from '../../components/spinner/WithSpinner';\nimport { fetchCollectionsStartAsync } from '../../redux/actions/shop';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  selectIsCollectionFetching,\n  selectIsCollectionLoaded,\n} from '../../redux/selectors/shop.selector';\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\nconst OverviewPageWithSpinner = WithSpinner(OverviewPage);\n// const CollectionPageWithSpinner = WithSpinner(Collection);\nclass Shop extends React.Component {\n  componentDidMount() {\n    const { fetchCollectionsStartAsync } = this.props;\n    fetchCollectionsStartAsync();\n    // LiveUpdate fetch data method - get snapshot of collection when first run or upon chagnes\n    // collectionRef.onSnapshot(async (snapshot) => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   // console.log(collectionsMap);\n    //   // action to update collections from store\n    //   updateCollections(collectionsMap);\n    //   this.setState({ loading: false });\n    // <Route exact path={`${match.path}`} component={OverviewPage} />\n    // });\n  }\n\n  render() {\n    const { match, loading, collectionLoaded } = this.props;\n\n    return (\n      <div>\n        <Route\n          path={`${match.path}`}\n          render={(props) => (\n            <OverviewPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner\n              isLoading={!collectionLoaded}\n              {...props}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  loading: selectIsCollectionFetching,\n  collectionLoaded: selectIsCollectionLoaded,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop);\n"]},"metadata":{},"sourceType":"module"}